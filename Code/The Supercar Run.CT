<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>866</ID>
      <Description>"THE SUPERCAR RUN"</Description>
      <Options moActivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>123</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>786</ID>
          <Description>"Stage 1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
print "The Supercar Run Cars Swap Stage 1 timer enabled"
function Stage1()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        local vehicles = {}
        --AST_ONE_77_10_PP_STOCK_1
        vehicles[1] = 2351754525
        vehicles[2] = 1662806892
        vehicles[3] = 228872290
        vehicles[4] = 1964104069
        vehicles[5] = 2344597012
        vehicles[6] = 2132135922
        vehicles[7] = 1440933530
        vehicles[8] = 549781442
        --AST_ONE_77_10_PP1V1
        vehicles[9] = 613611658
        vehicles[10] = 813015225
        vehicles[11] = 3419515662
        vehicles[12] = 2461199550
        vehicles[13] = 1159870676
        vehicles[14] = 1797540164
        vehicles[15] = 2593782817
        vehicles[16] = 3779064502
        --AST_ONE_77_10_PP2V1
        vehicles[17] = 2815320120
        vehicles[18] = 1595550620
        vehicles[19] = 2739858695
        vehicles[20] = 3707827774
        vehicles[21] = 781260459
        vehicles[22] = 539917869
        vehicles[23] = 3665518132
        vehicles[24] = 334451358
        --AST_ONE_77_10_RIVAL_1
        vehicles[25] = 2723042599
        --POR_CAR_GT_08_PP_STOCK_1
        vehicles[26] = 2168567350
        vehicles[27] = 2814841447
        vehicles[28] = 2326235097
        vehicles[29] = 1070731952
        vehicles[30] = 1467600787
        vehicles[31] = 2519948613
        vehicles[32] = 2060072065
        vehicles[33] = 4281187630
        --POR_CAR_GT_08_PP1V1
        vehicles[34] = 583962154
        vehicles[35] = 678369750
        vehicles[36] = 2458568756
        vehicles[37] = 1728488156
        vehicles[38] = 152393893
        vehicles[39] = 4216707801
        vehicles[40] = 3701910843
        vehicles[41] = 1108161064
        --BUG_VEY_SS_10_PP_STOCK_1
        vehicles[42] = 1396925995
        vehicles[43] = 233386615
        vehicles[44] = 198885591
        vehicles[45] = 2508479814
        vehicles[46] = 38889236
        vehicles[47] = 2998207530
        vehicles[48] = 222257381
        vehicles[49] = 3456734173
        --BUG_VEY_SS_10_PP1V1
        vehicles[50] = 397414533
        vehicles[51] = 13600042
        vehicles[52] = 1173801304
        vehicles[53] = 2683073109
        vehicles[54] = 3414920866
        vehicles[55] = 4061025962
        vehicles[56] = 4269471868
        vehicles[57] = 1201919218
        --GUM_APO_S_11_PP_STOCK_1
        vehicles[58] = 4194888242
        vehicles[59] = 2929300545
        vehicles[60] = 3513026456
        vehicles[61] = 2656167781
        vehicles[62] = 1027466826
        vehicles[63] = 3035566623
        vehicles[64] = 2448020030
        vehicles[65] = 1169312998
        --GUM_APO_S_11_PP1V1
        vehicles[66] = 2604599393
        vehicles[67] = 1428535737
        vehicles[68] = 1269182954
        vehicles[69] = 3445163782
        vehicles[70] = 1267634863
        vehicles[71] = 1972342918
        vehicles[72] = 2708126175
        vehicles[73] = 2599136713
        --HEN_VEN_GT_11_PP_STOCK_1
        vehicles[74] = 1889692556
        vehicles[75] = 2875939421
        vehicles[76] = 1843403582
        vehicles[77] = 1559471646
        vehicles[78] = 1293973268
        vehicles[79] = 1435683144
        vehicles[80] = 2573564796
        vehicles[81] = 2334641747
        --HEN_VEN_GT_11_PP1V1
        vehicles[82] = 1532349533
        vehicles[83] = 1612734426
        vehicles[84] = 1350165957
        vehicles[85] = 3838522613
        vehicles[86] = 3126269201
        vehicles[87] = 2902535361
        vehicles[88] = 42442522
        vehicles[89] = 284782573
        --KOE_AGE_R_11_PP_STOCK_1
        vehicles[90] = 938384918
        vehicles[91] = 3882992039
        vehicles[92] = 1371105745
        vehicles[93] = 2626688083
        vehicles[94] = 1231578851
        vehicles[95] = 3884005823
        vehicles[96] = 789750505
        vehicles[97] = 4215073769
        --KOE_AGE_R_11_PP1V1
        vehicles[98] = 450562262
        vehicles[99] = 3174728285
        vehicles[100] = 3125779387
        vehicles[101] = 3260662067
        vehicles[102] = 132303528
        vehicles[103] = 3392822886
        vehicles[104] = 4175699004
        vehicles[105] = 1147481775
        --LAM_AVE_700_12_PP_STOCK_1
        vehicles[106] = 228156588
        vehicles[107] = 2629373704
        vehicles[108] = 3963234612
        vehicles[109] = 2534942175
        vehicles[110] = 1033287156
        vehicles[111] = 1605709038
        vehicles[112] = 1956113471
        vehicles[113] = 3262842592
        --LAM_AVE_700_12_PP1V1
        vehicles[114] = 1630069578
        vehicles[115] = 1893492524
        vehicles[116] = 2320472582
        vehicles[117] = 1033194420
        vehicles[118] = 3418403022
        vehicles[119] = 3911160656
        vehicles[120] = 2473793792
        vehicles[121] = 3114695091
        --LAM_AVE_700_12_PP2V1
        vehicles[122] = 871581221
        vehicles[123] = 2858063602
        vehicles[124] = 627541664
        vehicles[125] = 4249870811
        vehicles[126] = 2456766280
        vehicles[127] = 4269161378
        vehicles[128] = 1418212893
        vehicles[129] = 961451823
        --LAM_AVE_700_12_PP_RUN
        vehicles[130] = 2196261666
        --LAM_MUR_SV_10_PP_STOCK_1
        vehicles[131] = 423002076
        vehicles[132] = 1164602375
        vehicles[133] = 2599236784
        vehicles[134] = 3259253348
        vehicles[135] = 3853253796
        vehicles[136] = 2117850692
        vehicles[137] = 2619259567
        vehicles[138] = 3214136501
        --LAM_MUR_SV_10_PP1V1
        vehicles[139] = 3389491414
        vehicles[140] = 1968726675
        vehicles[141] = 2504059847
        vehicles[142] = 329725607
        vehicles[143] = 4238989743
        vehicles[144] = 4205372699
        vehicles[145] = 3488973739
        vehicles[146] = 1567464013
        --LAM_MUR_SV_10_PP2V1
        vehicles[147] = 3343835678
        vehicles[148] = 2061181417
        vehicles[149] = 2495288543
        vehicles[150] = 4073003222
        vehicles[151] = 2322578206
        vehicles[152] = 662600563
        vehicles[153] = 670388343
        vehicles[154] = 1597875720
        --LAM_MUR_SV_10_PP_RARE_1
        vehicles[155] = 2854099895
        --LAM_SES_ELE_11_PP_STOCK_1
        vehicles[156] = 3037763135
        --LAM_SES_ELE_11_PP1V1
        vehicles[157] = 663647969
        vehicles[158] = 2362038992
        vehicles[159] = 2043180730
        vehicles[160] = 904850386
        vehicles[161] = 1277500942
        vehicles[162] = 2615408399
        vehicles[163] = 1287448061
        vehicles[164] = 1758221874
        --LAM_SES_ELE_11_PP2V1
        vehicles[165] = 386899547
        vehicles[166] = 1627756866
        vehicles[167] = 3796640221
        vehicles[168] = 2910801194
        vehicles[169] = 4108800856
        vehicles[170] = 2672444790
        vehicles[171] = 2380859159
        vehicles[172] = 2431781612
        --LAM_SES_ELE_11_PP_RARE_1
        vehicles[173] = 1021146513
        --MCL_F1_STK_94_PP_STOCK_1
        vehicles[174] = 3082609147
        vehicles[175] = 1842326981
        vehicles[176] = 3597153073
        vehicles[177] = 2027198581
        vehicles[178] = 4061750909
        vehicles[179] = 3284152259
        vehicles[180] = 3971845986
        vehicles[181] = 2188451802
        --MCL_F1_STK_94_PP1V1
        vehicles[182] = 2188732611
        vehicles[183] = 8847892
        vehicles[184] = 2546659436
        vehicles[185] = 4201908254
        vehicles[186] = 3309128826
        vehicles[187] = 3763200407
        vehicles[188] = 734242523
        vehicles[189] = 4147231431
        --MCL_F1_STK_94_PP2V1
        vehicles[190] = 3451952857
        vehicles[191] = 2727696005
        vehicles[192] = 2569286113
        vehicles[193] = 179413785
        vehicles[194] = 2797745784
        vehicles[195] = 4269482447
        vehicles[196] = 1346627002
        vehicles[197] = 3904972435
        --MCL_MP4_12C_12_PP_STOCK_1
        vehicles[198] = 2658400503
        vehicles[199] = 4193773627
        vehicles[200] = 1619287845
        vehicles[201] = 939656905
        vehicles[202] = 2000101387
        vehicles[203] = 2985567767
        vehicles[204] = 1596404988
        vehicles[205] = 3225073129
        --MCL_MP4_12C_12_PP1V1
        vehicles[206] = 3131107123
        vehicles[207] = 4294611947
        vehicles[208] = 3922078657
        vehicles[209] = 1057106373
        vehicles[210] = 3144079377
        vehicles[211] = 3471408279
        vehicles[212] = 130378825
        vehicles[213] = 4082318510
        --MCL_MP4_12C_12_PP2V1
        vehicles[214] = 2541095939
        vehicles[215] = 91889143
        vehicles[216] = 1017936786
        vehicles[217] = 3013363001
        vehicles[218] = 1204401820
        vehicles[219] = 3568224351
        vehicles[220] = 702147282
        vehicles[221] = 1587206021
        --MCL_MP4_12C_12_PP_RARE_1
        vehicles[222] = 2166586403
        --MCL_MP4_12C_12_NFS_E
        vehicles[223] = 3784919988
        --PAG_HUA_STK_11_PP_STOCK_1
        vehicles[224] = 801824035
        vehicles[225] = 3644372353
        vehicles[226] = 1000995635
        vehicles[227] = 2301704731
        vehicles[228] = 1033940261
        vehicles[229] = 2259031478
        vehicles[230] = 1536272541
        vehicles[231] = 2571694936
        --PAG_HUA_STK_11_PP1V1
        vehicles[232] = 238433599
        vehicles[233] = 3388131117
        vehicles[234] = 270572032
        vehicles[235] = 429465421
        vehicles[236] = 1363587384
        vehicles[237] = 2904320215
        vehicles[238] = 533716564
        vehicles[239] = 1368115291
        --PAG_HUA_STK_11_PP2V1
        vehicles[240] = 1008774409
        vehicles[241] = 3263622175
        vehicles[242] = 911442981
        vehicles[243] = 1504752564
        vehicles[244] = 2112395282
        vehicles[245] = 3901405701
        vehicles[246] = 934423389
        vehicles[247] = 885036472
        --PAG_HUA_STK_11_PP_RARE_1
        vehicles[248] = 2149624056
        --PAG_HUA_STK_11_PP_RUN
        vehicles[249] = 671513072
        --PAG_ZON_CIN_10_PP_STOCK_1
        vehicles[250] = 3444720201
        vehicles[251] = 4205485260
        vehicles[252] = 869131265
        vehicles[253] = 590551761
        vehicles[254] = 300480834
        vehicles[255] = 1621994448
        vehicles[256] = 989985070
        vehicles[257] = 1285392907
        --PAG_ZON_CIN_10_PP1V1
        vehicles[258] = 749556118
        vehicles[259] = 2979651631
        vehicles[260] = 4244524106
        vehicles[261] = 2645559681
        vehicles[262] = 3775521792
        vehicles[263] = 3496677447
        vehicles[264] = 316886774
        vehicles[265] = 273045201
        --PAG_ZON_CIN_10_PP2V1
        vehicles[266] = 2030547104
        vehicles[267] = 265034312
        vehicles[268] = 268954836
        vehicles[269] = 1431801290
        vehicles[270] = 1746156725
        vehicles[271] = 2288285211
        vehicles[272] = 463794150
        vehicles[273] = 847907506
        --PAG_ZON_CIN_10_PP_RARE_1
        vehicles[274] = 1785461374
        --POR_918_RSR_11_PP_STOCK_1
        vehicles[275] = 3362615761
        vehicles[276] = 1491889756
        vehicles[277] = 74329220
        vehicles[278] = 2050041874
        vehicles[279] = 2035297976
        vehicles[280] = 2259933696
        vehicles[281] = 4020233018
        vehicles[282] = 2429649982
        --POR_918_RSR_11_PP1V1
        vehicles[283] = 3590803949
        vehicles[284] = 470621453
        vehicles[285] = 3564669780
        vehicles[286] = 358280095
        vehicles[287] = 3275213580
        vehicles[288] = 2051625406
        vehicles[289] = 1980565952
        vehicles[290] = 2585244432
        --POR_918_RSR_11_PP2V1
        vehicles[291] = 2455444527
        vehicles[292] = 1358334390
        vehicles[293] = 3150721719
        vehicles[294] = 2293722771
        vehicles[295] = 3732541420
        vehicles[296] = 2676860188
        vehicles[297] = 1188933131
        vehicles[298] = 994061469
        --POR_918_RSR_11_PP_RARE_1
        vehicles[299] = 2235038457
        --POR_918_RSR_11_PP_RUN
        vehicles[300] = 893260034
        --MCL_MP4_12C_12_E3
        vehicles[301] = 3456340490
        --AUD_R8_V10_10_PP_RUN
        vehicles[302] = 1078212109
        --AUD_R8_V10_10_AI_242
        vehicles[303] = 1231946819
        --AUD_R8_V10_10_AI_257
        vehicles[304] = 1506140079
        --CHE_VET_CBN_10_PP_RARE_1
        vehicles[305] = 1289781367
        --CHE_VET_CBN_10_NFS_E
        vehicles[306] = 1732803059
        --FOR_GT_STK_06_AI_246
        vehicles[307] = 1732090001
        --FOR_GT_STK_06_AI_247
        vehicles[308] = 343400313
        --LAM_GAL_VB_10_AI_291
        vehicles[309] = 398700111
        --LOT_EXI_260_10_AI_251
        vehicles[310] = 3413518135
        --MAZ_RX7_RZ_98_NFS_E
        vehicles[311] = 529645684
        --NIS_240_ZG_71_PP_RARE_1
        vehicles[312] = 4150176875
        --NIS_GTR_R32_91_PP_RARE_1
        vehicles[313] = 1279882972
        --NIS_GTR_STK_73_PP_RARE_1
        vehicles[314] = 1203603962
        --NIS_GTR_V_10_PP_RUN
        vehicles[315] = 501327745
        --POR_GT3_RS_10_AI_248
        vehicles[316] = 4134624293
        --POR_GT3_RS_10_PP_RARE_1
        vehicles[317] = 984573869
        --POR_GT3_RS_10_PP_RARE_2
        vehicles[318] = 996427356
        --VOL_GTI_MK1_76_PP_RARE_1
        vehicles[319] = 3720220186
        --BMW_M3_GTS_10_NFS_E
        vehicles[320] = 3979197479
        --SHE_DAY_COU_65_PP_RARE_1
        vehicles[321] = 4022012078
        --SUB_WRX_STI_09_PP_RARE_1
        vehicles[322] = 3590308002
        --FOR_MUS_BOS_12_PP_RARE_1
        vehicles[323] = 4214528836
        --CHE_EL_CAM_70_AI_266
        vehicles[324] = 3393955391
        --CHE_VET_CBN_10_AI_250
        vehicles[325] = 4036792314
        --CHE_VET_CBN_10_AI_300
        vehicles[326] = 656030015
        --NIS_370_Z_09_AI_258
        vehicles[327] = 4045851596
        --NIS_GTR_V_10_AI_245
        vehicles[328] = 4201754403
        --SHE_DAY_COU_65_AI_254
        vehicles[329] = 1201503826
        --SUB_WRX_STI_09_AI_249
        vehicles[330] = 3193966487
        --BMW_1M_COU_11_PP_RARE_1
        vehicles[331] = 1682648577
        --AUD_R8_V10_10_NFS_E
        vehicles[332] = 3064452558
        --BMW_M3_E30_90_PP_RARE_1
        vehicles[333] = 2320421064
        --CHE_CAM_ZL1_13_PP_RARE_1
        vehicles[334] = 1983307871
        --CHE_EL_CAM_70_PP_RARE_1
        vehicles[335] = 960019312
        --CHE_CAM_SS_67_PP_RARE_1
        vehicles[336] = 313312439
        --CHE_VET_CBN_10_PP_RUN
        vehicles[337] = 1143930682
        --FOR_FOC_RS_10_PP_RARE_1
        vehicles[338] = 699181181
        --FOR_GT_STK_06_NFS_E
        vehicles[339] = 1588264861
        --FOR_GT_STK_06_PP_RARE_1
        vehicles[340] = 1444633056
        --LAM_GAL_VB_10_NFS_E
        vehicles[341] = 3115752732
        --LOT_EVO_STK_10_PP_RARE_1
        vehicles[342] = 1821494394
        --LOT_EXI_260_10_PP_RARE_1
        vehicles[343] = 30590049
        --MAZ_RX7_RZ_98_PP_RARE_1
        vehicles[344] = 2688135082
        --MER_SLS_AMG_10_NFS_E
        vehicles[345] = 918776313
        --MER_SLS_AMG_10_PP_RARE_1
        vehicles[346] = 3990075021
        --MER_SLS_AMG_10_RIVAL
        vehicles[347] = 3367604003
        --NIS_S14_A_97_PP_RARE_1
        vehicles[348] = 1409617150
        --NIS_370_Z_09_PP_RARE_1
        vehicles[349] = 794975903
        --NIS_GTR_V_10_NFS_E
        vehicles[350] = 2056341605
        --NIS_GTR_V_10_PP_RARE_1
        vehicles[351] = 528049014
        --PON_FIR_STK_78_PP_RARE_1
        vehicles[352] = 3044389769
        --POR_991_S_12_PP_RARE_1
        vehicles[353] = 3279588277
        --REN_MEG_RS_10_PP_RARE_1
        vehicles[354] = 1861624512
        --SHE_DAY_COU_65_NFS_E
        vehicles[355] = 1095199585
        --TOY_SUP_STK_98_MARKETING_1
        vehicles[356] = 1222984308

        --EASTER EGG
        --LAMBORGHINI MIURA SV "RIVAL"
        vehicles[357] = 1891289054

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3481124691 then
            first = "[[[[027A4F60]+14]+68]+10]+4"
            second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "San Francisco Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1014047533 then
            first = "[[[[027A4F60]+14]+68]+10]+4"
            second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Altamont Pass Race cars swap has completed successfully"
            end
        end
    end
end

s1 = createTimer(nil)
timer_onTimer(s1,Stage1)
timer_setInterval(s1, 500)
timer_setEnabled(s1, true)


[DISABLE]
timer_setEnabled(s1, false)
print "The Supercar Run Cars Swap Stage 1 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>789</ID>
          <Description>"Stage 2 3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
print "The Vintage Run Cars Swap Stage 2 &amp; 3 timer enabled"
function Stage23()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        local vehicles = {}
        --AST_ONE_77_10_PP_STOCK_1
        vehicles[1] = 2351754525
        vehicles[2] = 1662806892
        vehicles[3] = 228872290
        vehicles[4] = 1964104069
        vehicles[5] = 2344597012
        vehicles[6] = 2132135922
        vehicles[7] = 1440933530
        vehicles[8] = 549781442
        --AST_ONE_77_10_PP1V1
        vehicles[9] = 613611658
        vehicles[10] = 813015225
        vehicles[11] = 3419515662
        vehicles[12] = 2461199550
        vehicles[13] = 1159870676
        vehicles[14] = 1797540164
        vehicles[15] = 2593782817
        vehicles[16] = 3779064502
        --AST_ONE_77_10_PP2V1
        vehicles[17] = 2815320120
        vehicles[18] = 1595550620
        vehicles[19] = 2739858695
        vehicles[20] = 3707827774
        vehicles[21] = 781260459
        vehicles[22] = 539917869
        vehicles[23] = 3665518132
        vehicles[24] = 334451358
        --AST_ONE_77_10_RIVAL_1
        vehicles[25] = 2723042599
        --POR_CAR_GT_08_PP_STOCK_1
        vehicles[26] = 2168567350
        vehicles[27] = 2814841447
        vehicles[28] = 2326235097
        vehicles[29] = 1070731952
        vehicles[30] = 1467600787
        vehicles[31] = 2519948613
        vehicles[32] = 2060072065
        vehicles[33] = 4281187630
        --POR_CAR_GT_08_PP1V1
        vehicles[34] = 583962154
        vehicles[35] = 678369750
        vehicles[36] = 2458568756
        vehicles[37] = 1728488156
        vehicles[38] = 152393893
        vehicles[39] = 4216707801
        vehicles[40] = 3701910843
        vehicles[41] = 1108161064
        --BUG_VEY_SS_10_PP_STOCK_1
        vehicles[42] = 1396925995
        vehicles[43] = 233386615
        vehicles[44] = 198885591
        vehicles[45] = 2508479814
        vehicles[46] = 38889236
        vehicles[47] = 2998207530
        vehicles[48] = 222257381
        vehicles[49] = 3456734173
        --BUG_VEY_SS_10_PP1V1
        vehicles[50] = 397414533
        vehicles[51] = 13600042
        vehicles[52] = 1173801304
        vehicles[53] = 2683073109
        vehicles[54] = 3414920866
        vehicles[55] = 4061025962
        vehicles[56] = 4269471868
        vehicles[57] = 1201919218
        --GUM_APO_S_11_PP_STOCK_1
        vehicles[58] = 4194888242
        vehicles[59] = 2929300545
        vehicles[60] = 3513026456
        vehicles[61] = 2656167781
        vehicles[62] = 1027466826
        vehicles[63] = 3035566623
        vehicles[64] = 2448020030
        vehicles[65] = 1169312998
        --GUM_APO_S_11_PP1V1
        vehicles[66] = 2604599393
        vehicles[67] = 1428535737
        vehicles[68] = 1269182954
        vehicles[69] = 3445163782
        vehicles[70] = 1267634863
        vehicles[71] = 1972342918
        vehicles[72] = 2708126175
        vehicles[73] = 2599136713
        --HEN_VEN_GT_11_PP_STOCK_1
        vehicles[74] = 1889692556
        vehicles[75] = 2875939421
        vehicles[76] = 1843403582
        vehicles[77] = 1559471646
        vehicles[78] = 1293973268
        vehicles[79] = 1435683144
        vehicles[80] = 2573564796
        vehicles[81] = 2334641747
        --HEN_VEN_GT_11_PP1V1
        vehicles[82] = 1532349533
        vehicles[83] = 1612734426
        vehicles[84] = 1350165957
        vehicles[85] = 3838522613
        vehicles[86] = 3126269201
        vehicles[87] = 2902535361
        vehicles[88] = 42442522
        vehicles[89] = 284782573
        --KOE_AGE_R_11_PP_STOCK_1
        vehicles[90] = 938384918
        vehicles[91] = 3882992039
        vehicles[92] = 1371105745
        vehicles[93] = 2626688083
        vehicles[94] = 1231578851
        vehicles[95] = 3884005823
        vehicles[96] = 789750505
        vehicles[97] = 4215073769
        --KOE_AGE_R_11_PP1V1
        vehicles[98] = 450562262
        vehicles[99] = 3174728285
        vehicles[100] = 3125779387
        vehicles[101] = 3260662067
        vehicles[102] = 132303528
        vehicles[103] = 3392822886
        vehicles[104] = 4175699004
        vehicles[105] = 1147481775
        --LAM_AVE_700_12_PP_STOCK_1
        vehicles[106] = 228156588
        vehicles[107] = 2629373704
        vehicles[108] = 3963234612
        vehicles[109] = 2534942175
        vehicles[110] = 1033287156
        vehicles[111] = 1605709038
        vehicles[112] = 1956113471
        vehicles[113] = 3262842592
        --LAM_AVE_700_12_PP1V1
        vehicles[114] = 1630069578
        vehicles[115] = 1893492524
        vehicles[116] = 2320472582
        vehicles[117] = 1033194420
        vehicles[118] = 3418403022
        vehicles[119] = 3911160656
        vehicles[120] = 2473793792
        vehicles[121] = 3114695091
        --LAM_AVE_700_12_PP2V1
        vehicles[122] = 871581221
        vehicles[123] = 2858063602
        vehicles[124] = 627541664
        vehicles[125] = 4249870811
        vehicles[126] = 2456766280
        vehicles[127] = 4269161378
        vehicles[128] = 1418212893
        vehicles[129] = 961451823
        --LAM_AVE_700_12_PP_RUN
        vehicles[130] = 2196261666
        --LAM_MUR_SV_10_PP_STOCK_1
        vehicles[131] = 423002076
        vehicles[132] = 1164602375
        vehicles[133] = 2599236784
        vehicles[134] = 3259253348
        vehicles[135] = 3853253796
        vehicles[136] = 2117850692
        vehicles[137] = 2619259567
        vehicles[138] = 3214136501
        --LAM_MUR_SV_10_PP1V1
        vehicles[139] = 3389491414
        vehicles[140] = 1968726675
        vehicles[141] = 2504059847
        vehicles[142] = 329725607
        vehicles[143] = 4238989743
        vehicles[144] = 4205372699
        vehicles[145] = 3488973739
        vehicles[146] = 1567464013
        --LAM_MUR_SV_10_PP2V1
        vehicles[147] = 3343835678
        vehicles[148] = 2061181417
        vehicles[149] = 2495288543
        vehicles[150] = 4073003222
        vehicles[151] = 2322578206
        vehicles[152] = 662600563
        vehicles[153] = 670388343
        vehicles[154] = 1597875720
        --LAM_MUR_SV_10_PP_RARE_1
        vehicles[155] = 2854099895
        --LAM_SES_ELE_11_PP_STOCK_1
        vehicles[156] = 3037763135
        --LAM_SES_ELE_11_PP1V1
        vehicles[157] = 663647969
        vehicles[158] = 2362038992
        vehicles[159] = 2043180730
        vehicles[160] = 904850386
        vehicles[161] = 1277500942
        vehicles[162] = 2615408399
        vehicles[163] = 1287448061
        vehicles[164] = 1758221874
        --LAM_SES_ELE_11_PP2V1
        vehicles[165] = 386899547
        vehicles[166] = 1627756866
        vehicles[167] = 3796640221
        vehicles[168] = 2910801194
        vehicles[169] = 4108800856
        vehicles[170] = 2672444790
        vehicles[171] = 2380859159
        vehicles[172] = 2431781612
        --LAM_SES_ELE_11_PP_RARE_1
        vehicles[173] = 1021146513
        --MCL_F1_STK_94_PP_STOCK_1
        vehicles[174] = 3082609147
        vehicles[175] = 1842326981
        vehicles[176] = 3597153073
        vehicles[177] = 2027198581
        vehicles[178] = 4061750909
        vehicles[179] = 3284152259
        vehicles[180] = 3971845986
        vehicles[181] = 2188451802
        --MCL_F1_STK_94_PP1V1
        vehicles[182] = 2188732611
        vehicles[183] = 8847892
        vehicles[184] = 2546659436
        vehicles[185] = 4201908254
        vehicles[186] = 3309128826
        vehicles[187] = 3763200407
        vehicles[188] = 734242523
        vehicles[189] = 4147231431
        --MCL_F1_STK_94_PP2V1
        vehicles[190] = 3451952857
        vehicles[191] = 2727696005
        vehicles[192] = 2569286113
        vehicles[193] = 179413785
        vehicles[194] = 2797745784
        vehicles[195] = 4269482447
        vehicles[196] = 1346627002
        vehicles[197] = 3904972435
        --MCL_MP4_12C_12_PP_STOCK_1
        vehicles[198] = 2658400503
        vehicles[199] = 4193773627
        vehicles[200] = 1619287845
        vehicles[201] = 939656905
        vehicles[202] = 2000101387
        vehicles[203] = 2985567767
        vehicles[204] = 1596404988
        vehicles[205] = 3225073129
        --MCL_MP4_12C_12_PP1V1
        vehicles[206] = 3131107123
        vehicles[207] = 4294611947
        vehicles[208] = 3922078657
        vehicles[209] = 1057106373
        vehicles[210] = 3144079377
        vehicles[211] = 3471408279
        vehicles[212] = 130378825
        vehicles[213] = 4082318510
        --MCL_MP4_12C_12_PP2V1
        vehicles[214] = 2541095939
        vehicles[215] = 91889143
        vehicles[216] = 1017936786
        vehicles[217] = 3013363001
        vehicles[218] = 1204401820
        vehicles[219] = 3568224351
        vehicles[220] = 702147282
        vehicles[221] = 1587206021
        --MCL_MP4_12C_12_PP_RARE_1
        vehicles[222] = 2166586403
        --MCL_MP4_12C_12_NFS_E
        vehicles[223] = 3784919988
        --PAG_HUA_STK_11_PP_STOCK_1
        vehicles[224] = 801824035
        vehicles[225] = 3644372353
        vehicles[226] = 1000995635
        vehicles[227] = 2301704731
        vehicles[228] = 1033940261
        vehicles[229] = 2259031478
        vehicles[230] = 1536272541
        vehicles[231] = 2571694936
        --PAG_HUA_STK_11_PP1V1
        vehicles[232] = 238433599
        vehicles[233] = 3388131117
        vehicles[234] = 270572032
        vehicles[235] = 429465421
        vehicles[236] = 1363587384
        vehicles[237] = 2904320215
        vehicles[238] = 533716564
        vehicles[239] = 1368115291
        --PAG_HUA_STK_11_PP2V1
        vehicles[240] = 1008774409
        vehicles[241] = 3263622175
        vehicles[242] = 911442981
        vehicles[243] = 1504752564
        vehicles[244] = 2112395282
        vehicles[245] = 3901405701
        vehicles[246] = 934423389
        vehicles[247] = 885036472
        --PAG_HUA_STK_11_PP_RARE_1
        vehicles[248] = 2149624056
        --PAG_HUA_STK_11_PP_RUN
        vehicles[249] = 671513072
        --PAG_ZON_CIN_10_PP_STOCK_1
        vehicles[250] = 3444720201
        vehicles[251] = 4205485260
        vehicles[252] = 869131265
        vehicles[253] = 590551761
        vehicles[254] = 300480834
        vehicles[255] = 1621994448
        vehicles[256] = 989985070
        vehicles[257] = 1285392907
        --PAG_ZON_CIN_10_PP1V1
        vehicles[258] = 749556118
        vehicles[259] = 2979651631
        vehicles[260] = 4244524106
        vehicles[261] = 2645559681
        vehicles[262] = 3775521792
        vehicles[263] = 3496677447
        vehicles[264] = 316886774
        vehicles[265] = 273045201
        --PAG_ZON_CIN_10_PP2V1
        vehicles[266] = 2030547104
        vehicles[267] = 265034312
        vehicles[268] = 268954836
        vehicles[269] = 1431801290
        vehicles[270] = 1746156725
        vehicles[271] = 2288285211
        vehicles[272] = 463794150
        vehicles[273] = 847907506
        --PAG_ZON_CIN_10_PP_RARE_1
        vehicles[274] = 1785461374
        --POR_918_RSR_11_PP_STOCK_1
        vehicles[275] = 3362615761
        vehicles[276] = 1491889756
        vehicles[277] = 74329220
        vehicles[278] = 2050041874
        vehicles[279] = 2035297976
        vehicles[280] = 2259933696
        vehicles[281] = 4020233018
        vehicles[282] = 2429649982
        --POR_918_RSR_11_PP1V1
        vehicles[283] = 3590803949
        vehicles[284] = 470621453
        vehicles[285] = 3564669780
        vehicles[286] = 358280095
        vehicles[287] = 3275213580
        vehicles[288] = 2051625406
        vehicles[289] = 1980565952
        vehicles[290] = 2585244432
        --POR_918_RSR_11_PP2V1
        vehicles[291] = 2455444527
        vehicles[292] = 1358334390
        vehicles[293] = 3150721719
        vehicles[294] = 2293722771
        vehicles[295] = 3732541420
        vehicles[296] = 2676860188
        vehicles[297] = 1188933131
        vehicles[298] = 994061469
        --POR_918_RSR_11_PP_RARE_1
        vehicles[299] = 2235038457
        --POR_918_RSR_11_PP_RUN
        vehicles[300] = 893260034
        --MCL_MP4_12C_12_E3
        vehicles[301] = 3456340490
        --AUD_R8_V10_10_PP_RUN
        vehicles[302] = 1078212109
        --AUD_R8_V10_10_AI_242
        vehicles[303] = 1231946819
        --AUD_R8_V10_10_AI_257
        vehicles[304] = 1506140079
        --CHE_VET_CBN_10_PP_RARE_1
        vehicles[305] = 1289781367
        --CHE_VET_CBN_10_NFS_E
        vehicles[306] = 1732803059
        --FOR_GT_STK_06_AI_246
        vehicles[307] = 1732090001
        --FOR_GT_STK_06_AI_247
        vehicles[308] = 343400313
        --LAM_GAL_VB_10_AI_291
        vehicles[309] = 398700111
        --LOT_EXI_260_10_AI_251
        vehicles[310] = 3413518135
        --MAZ_RX7_RZ_98_NFS_E
        vehicles[311] = 529645684
        --NIS_240_ZG_71_PP_RARE_1
        vehicles[312] = 4150176875
        --NIS_GTR_R32_91_PP_RARE_1
        vehicles[313] = 1279882972
        --NIS_GTR_STK_73_PP_RARE_1
        vehicles[314] = 1203603962
        --NIS_GTR_V_10_PP_RUN
        vehicles[315] = 501327745
        --POR_GT3_RS_10_AI_248
        vehicles[316] = 4134624293
        --POR_GT3_RS_10_PP_RARE_1
        vehicles[317] = 984573869
        --POR_GT3_RS_10_PP_RARE_2
        vehicles[318] = 996427356
        --VOL_GTI_MK1_76_PP_RARE_1
        vehicles[319] = 3720220186
        --BMW_M3_GTS_10_NFS_E
        vehicles[320] = 3979197479
        --SHE_DAY_COU_65_PP_RARE_1
        vehicles[321] = 4022012078
        --SUB_WRX_STI_09_PP_RARE_1
        vehicles[322] = 3590308002
        --FOR_MUS_BOS_12_PP_RARE_1
        vehicles[323] = 4214528836
        --CHE_EL_CAM_70_AI_266
        vehicles[324] = 3393955391
        --CHE_VET_CBN_10_AI_250
        vehicles[325] = 4036792314
        --CHE_VET_CBN_10_AI_300
        vehicles[326] = 656030015
        --NIS_370_Z_09_AI_258
        vehicles[327] = 4045851596
        --NIS_GTR_V_10_AI_245
        vehicles[328] = 4201754403
        --SHE_DAY_COU_65_AI_254
        vehicles[329] = 1201503826
        --SUB_WRX_STI_09_AI_249
        vehicles[330] = 3193966487
        --BMW_1M_COU_11_PP_RARE_1
        vehicles[331] = 1682648577
        --AUD_R8_V10_10_NFS_E
        vehicles[332] = 3064452558
        --BMW_M3_E30_90_PP_RARE_1
        vehicles[333] = 2320421064
        --CHE_CAM_ZL1_13_PP_RARE_1
        vehicles[334] = 1983307871
        --CHE_EL_CAM_70_PP_RARE_1
        vehicles[335] = 960019312
        --CHE_CAM_SS_67_PP_RARE_1
        vehicles[336] = 313312439
        --CHE_VET_CBN_10_PP_RUN
        vehicles[337] = 1143930682
        --FOR_FOC_RS_10_PP_RARE_1
        vehicles[338] = 699181181
        --FOR_GT_STK_06_NFS_E
        vehicles[339] = 1588264861
        --FOR_GT_STK_06_PP_RARE_1
        vehicles[340] = 1444633056
        --LAM_GAL_VB_10_NFS_E
        vehicles[341] = 3115752732
        --LOT_EVO_STK_10_PP_RARE_1
        vehicles[342] = 1821494394
        --LOT_EXI_260_10_PP_RARE_1
        vehicles[343] = 30590049
        --MAZ_RX7_RZ_98_PP_RARE_1
        vehicles[344] = 2688135082
        --MER_SLS_AMG_10_NFS_E
        vehicles[345] = 918776313
        --MER_SLS_AMG_10_PP_RARE_1
        vehicles[346] = 3990075021
        --MER_SLS_AMG_10_RIVAL
        vehicles[347] = 3367604003
        --NIS_S14_A_97_PP_RARE_1
        vehicles[348] = 1409617150
        --NIS_370_Z_09_PP_RARE_1
        vehicles[349] = 794975903
        --NIS_GTR_V_10_NFS_E
        vehicles[350] = 2056341605
        --NIS_GTR_V_10_PP_RARE_1
        vehicles[351] = 528049014
        --PON_FIR_STK_78_PP_RARE_1
        vehicles[352] = 3044389769
        --POR_991_S_12_PP_RARE_1
        vehicles[353] = 3279588277
        --REN_MEG_RS_10_PP_RARE_1
        vehicles[354] = 1861624512
        --SHE_DAY_COU_65_NFS_E
        vehicles[355] = 1095199585
        --TOY_SUP_STK_98_MARKETING_1
        vehicles[356] = 1222984308

        --EASTER EGG
        --LAMBORGHINI MIURA SV "RIVAL"
        vehicles[357] = 1891289054

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 96674846 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Yosemite Approach A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2360253972 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Yosemite South A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2463598039 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            --local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            --writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Yosemite South B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1390273791 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2940168599 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1161287153 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3489511903 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4225104048 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            writeInteger(first,332754079)
            writeInteger(second,523078012)
            if readInteger(first) == 332754079 and
                readInteger(second) == 523078012 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 246197794 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Las Vegas East B Race cars swap has completed successfully"
            end
        end
    end
end

s23 = createTimer(nil)
timer_onTimer(s23,Stage23)
timer_setInterval(s23, 500)
timer_setEnabled(s23, true)


[DISABLE]
timer_setEnabled(s23, false)
print "The Vintage Run Cars Swap Stage 2 &amp; 3 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>821</ID>
          <Description>"Stage 4 10"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
print "The Supercar Run Cars Swap Stage 4 to 10 timer enabled"
function Stage410()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        if readPointer("[[[[00AA71F4]+F8]+6E8]+28]+58") ~= nil and
            readInteger("[[[[00AA71F4]+F8]+6E8]+28]+58") == 3090365568 then
            writeInteger("[[[[00AA71F4]+F8]+6E8]+28]+58",2763179715)
        end
        local vehicles = {}
        --AST_ONE_77_10_PP_STOCK_1
        vehicles[1] = 2351754525
        vehicles[2] = 1662806892
        vehicles[3] = 228872290
        vehicles[4] = 1964104069
        vehicles[5] = 2344597012
        vehicles[6] = 2132135922
        vehicles[7] = 1440933530
        vehicles[8] = 549781442
        --AST_ONE_77_10_PP1V1
        vehicles[9] = 613611658
        vehicles[10] = 813015225
        vehicles[11] = 3419515662
        vehicles[12] = 2461199550
        vehicles[13] = 1159870676
        vehicles[14] = 1797540164
        vehicles[15] = 2593782817
        vehicles[16] = 3779064502
        --AST_ONE_77_10_PP2V1
        vehicles[17] = 2815320120
        vehicles[18] = 1595550620
        vehicles[19] = 2739858695
        vehicles[20] = 3707827774
        vehicles[21] = 781260459
        vehicles[22] = 539917869
        vehicles[23] = 3665518132
        vehicles[24] = 334451358
        --AST_ONE_77_10_RIVAL_1
        vehicles[25] = 2723042599
        --POR_CAR_GT_08_PP_STOCK_1
        vehicles[26] = 2168567350
        vehicles[27] = 2814841447
        vehicles[28] = 2326235097
        vehicles[29] = 1070731952
        vehicles[30] = 1467600787
        vehicles[31] = 2519948613
        vehicles[32] = 2060072065
        vehicles[33] = 4281187630
        --POR_CAR_GT_08_PP1V1
        vehicles[34] = 583962154
        vehicles[35] = 678369750
        vehicles[36] = 2458568756
        vehicles[37] = 1728488156
        vehicles[38] = 152393893
        vehicles[39] = 4216707801
        vehicles[40] = 3701910843
        vehicles[41] = 1108161064
        --BUG_VEY_SS_10_PP_STOCK_1
        vehicles[42] = 1396925995
        vehicles[43] = 233386615
        vehicles[44] = 198885591
        vehicles[45] = 2508479814
        vehicles[46] = 38889236
        vehicles[47] = 2998207530
        vehicles[48] = 222257381
        vehicles[49] = 3456734173
        --BUG_VEY_SS_10_PP1V1
        vehicles[50] = 397414533
        vehicles[51] = 13600042
        vehicles[52] = 1173801304
        vehicles[53] = 2683073109
        vehicles[54] = 3414920866
        vehicles[55] = 4061025962
        vehicles[56] = 4269471868
        vehicles[57] = 1201919218
        --GUM_APO_S_11_PP_STOCK_1
        vehicles[58] = 4194888242
        vehicles[59] = 2929300545
        vehicles[60] = 3513026456
        vehicles[61] = 2656167781
        vehicles[62] = 1027466826
        vehicles[63] = 3035566623
        vehicles[64] = 2448020030
        vehicles[65] = 1169312998
        --GUM_APO_S_11_PP1V1
        vehicles[66] = 2604599393
        vehicles[67] = 1428535737
        vehicles[68] = 1269182954
        vehicles[69] = 3445163782
        vehicles[70] = 1267634863
        vehicles[71] = 1972342918
        vehicles[72] = 2708126175
        vehicles[73] = 2599136713
        --HEN_VEN_GT_11_PP_STOCK_1
        vehicles[74] = 1889692556
        vehicles[75] = 2875939421
        vehicles[76] = 1843403582
        vehicles[77] = 1559471646
        vehicles[78] = 1293973268
        vehicles[79] = 1435683144
        vehicles[80] = 2573564796
        vehicles[81] = 2334641747
        --HEN_VEN_GT_11_PP1V1
        vehicles[82] = 1532349533
        vehicles[83] = 1612734426
        vehicles[84] = 1350165957
        vehicles[85] = 3838522613
        vehicles[86] = 3126269201
        vehicles[87] = 2902535361
        vehicles[88] = 42442522
        vehicles[89] = 284782573
        --KOE_AGE_R_11_PP_STOCK_1
        vehicles[90] = 938384918
        vehicles[91] = 3882992039
        vehicles[92] = 1371105745
        vehicles[93] = 2626688083
        vehicles[94] = 1231578851
        vehicles[95] = 3884005823
        vehicles[96] = 789750505
        vehicles[97] = 4215073769
        --KOE_AGE_R_11_PP1V1
        vehicles[98] = 450562262
        vehicles[99] = 3174728285
        vehicles[100] = 3125779387
        vehicles[101] = 3260662067
        vehicles[102] = 132303528
        vehicles[103] = 3392822886
        vehicles[104] = 4175699004
        vehicles[105] = 1147481775
        --LAM_AVE_700_12_PP_STOCK_1
        vehicles[106] = 228156588
        vehicles[107] = 2629373704
        vehicles[108] = 3963234612
        vehicles[109] = 2534942175
        vehicles[110] = 1033287156
        vehicles[111] = 1605709038
        vehicles[112] = 1956113471
        vehicles[113] = 3262842592
        --LAM_AVE_700_12_PP1V1
        vehicles[114] = 1630069578
        vehicles[115] = 1893492524
        vehicles[116] = 2320472582
        vehicles[117] = 1033194420
        vehicles[118] = 3418403022
        vehicles[119] = 3911160656
        vehicles[120] = 2473793792
        vehicles[121] = 3114695091
        --LAM_AVE_700_12_PP2V1
        vehicles[122] = 871581221
        vehicles[123] = 2858063602
        vehicles[124] = 627541664
        vehicles[125] = 4249870811
        vehicles[126] = 2456766280
        vehicles[127] = 4269161378
        vehicles[128] = 1418212893
        vehicles[129] = 961451823
        --LAM_AVE_700_12_PP_RUN
        vehicles[130] = 2196261666
        --LAM_MUR_SV_10_PP_STOCK_1
        vehicles[131] = 423002076
        vehicles[132] = 1164602375
        vehicles[133] = 2599236784
        vehicles[134] = 3259253348
        vehicles[135] = 3853253796
        vehicles[136] = 2117850692
        vehicles[137] = 2619259567
        vehicles[138] = 3214136501
        --LAM_MUR_SV_10_PP1V1
        vehicles[139] = 3389491414
        vehicles[140] = 1968726675
        vehicles[141] = 2504059847
        vehicles[142] = 329725607
        vehicles[143] = 4238989743
        vehicles[144] = 4205372699
        vehicles[145] = 3488973739
        vehicles[146] = 1567464013
        --LAM_MUR_SV_10_PP2V1
        vehicles[147] = 3343835678
        vehicles[148] = 2061181417
        vehicles[149] = 2495288543
        vehicles[150] = 4073003222
        vehicles[151] = 2322578206
        vehicles[152] = 662600563
        vehicles[153] = 670388343
        vehicles[154] = 1597875720
        --LAM_MUR_SV_10_PP_RARE_1
        vehicles[155] = 2854099895
        --LAM_SES_ELE_11_PP_STOCK_1
        vehicles[156] = 3037763135
        --LAM_SES_ELE_11_PP1V1
        vehicles[157] = 663647969
        vehicles[158] = 2362038992
        vehicles[159] = 2043180730
        vehicles[160] = 904850386
        vehicles[161] = 1277500942
        vehicles[162] = 2615408399
        vehicles[163] = 1287448061
        vehicles[164] = 1758221874
        --LAM_SES_ELE_11_PP2V1
        vehicles[165] = 386899547
        vehicles[166] = 1627756866
        vehicles[167] = 3796640221
        vehicles[168] = 2910801194
        vehicles[169] = 4108800856
        vehicles[170] = 2672444790
        vehicles[171] = 2380859159
        vehicles[172] = 2431781612
        --LAM_SES_ELE_11_PP_RARE_1
        vehicles[173] = 1021146513
        --MCL_F1_STK_94_PP_STOCK_1
        vehicles[174] = 3082609147
        vehicles[175] = 1842326981
        vehicles[176] = 3597153073
        vehicles[177] = 2027198581
        vehicles[178] = 4061750909
        vehicles[179] = 3284152259
        vehicles[180] = 3971845986
        vehicles[181] = 2188451802
        --MCL_F1_STK_94_PP1V1
        vehicles[182] = 2188732611
        vehicles[183] = 8847892
        vehicles[184] = 2546659436
        vehicles[185] = 4201908254
        vehicles[186] = 3309128826
        vehicles[187] = 3763200407
        vehicles[188] = 734242523
        vehicles[189] = 4147231431
        --MCL_F1_STK_94_PP2V1
        vehicles[190] = 3451952857
        vehicles[191] = 2727696005
        vehicles[192] = 2569286113
        vehicles[193] = 179413785
        vehicles[194] = 2797745784
        vehicles[195] = 4269482447
        vehicles[196] = 1346627002
        vehicles[197] = 3904972435
        --MCL_MP4_12C_12_PP_STOCK_1
        vehicles[198] = 2658400503
        vehicles[199] = 4193773627
        vehicles[200] = 1619287845
        vehicles[201] = 939656905
        vehicles[202] = 2000101387
        vehicles[203] = 2985567767
        vehicles[204] = 1596404988
        vehicles[205] = 3225073129
        --MCL_MP4_12C_12_PP1V1
        vehicles[206] = 3131107123
        vehicles[207] = 4294611947
        vehicles[208] = 3922078657
        vehicles[209] = 1057106373
        vehicles[210] = 3144079377
        vehicles[211] = 3471408279
        vehicles[212] = 130378825
        vehicles[213] = 4082318510
        --MCL_MP4_12C_12_PP2V1
        vehicles[214] = 2541095939
        vehicles[215] = 91889143
        vehicles[216] = 1017936786
        vehicles[217] = 3013363001
        vehicles[218] = 1204401820
        vehicles[219] = 3568224351
        vehicles[220] = 702147282
        vehicles[221] = 1587206021
        --MCL_MP4_12C_12_PP_RARE_1
        vehicles[222] = 2166586403
        --MCL_MP4_12C_12_NFS_E
        vehicles[223] = 3784919988
        --PAG_HUA_STK_11_PP_STOCK_1
        vehicles[224] = 801824035
        vehicles[225] = 3644372353
        vehicles[226] = 1000995635
        vehicles[227] = 2301704731
        vehicles[228] = 1033940261
        vehicles[229] = 2259031478
        vehicles[230] = 1536272541
        vehicles[231] = 2571694936
        --PAG_HUA_STK_11_PP1V1
        vehicles[232] = 238433599
        vehicles[233] = 3388131117
        vehicles[234] = 270572032
        vehicles[235] = 429465421
        vehicles[236] = 1363587384
        vehicles[237] = 2904320215
        vehicles[238] = 533716564
        vehicles[239] = 1368115291
        --PAG_HUA_STK_11_PP2V1
        vehicles[240] = 1008774409
        vehicles[241] = 3263622175
        vehicles[242] = 911442981
        vehicles[243] = 1504752564
        vehicles[244] = 2112395282
        vehicles[245] = 3901405701
        vehicles[246] = 934423389
        vehicles[247] = 885036472
        --PAG_HUA_STK_11_PP_RARE_1
        vehicles[248] = 2149624056
        --PAG_HUA_STK_11_PP_RUN
        vehicles[249] = 671513072
        --PAG_ZON_CIN_10_PP_STOCK_1
        vehicles[250] = 3444720201
        vehicles[251] = 4205485260
        vehicles[252] = 869131265
        vehicles[253] = 590551761
        vehicles[254] = 300480834
        vehicles[255] = 1621994448
        vehicles[256] = 989985070
        vehicles[257] = 1285392907
        --PAG_ZON_CIN_10_PP1V1
        vehicles[258] = 749556118
        vehicles[259] = 2979651631
        vehicles[260] = 4244524106
        vehicles[261] = 2645559681
        vehicles[262] = 3775521792
        vehicles[263] = 3496677447
        vehicles[264] = 316886774
        vehicles[265] = 273045201
        --PAG_ZON_CIN_10_PP2V1
        vehicles[266] = 2030547104
        vehicles[267] = 265034312
        vehicles[268] = 268954836
        vehicles[269] = 1431801290
        vehicles[270] = 1746156725
        vehicles[271] = 2288285211
        vehicles[272] = 463794150
        vehicles[273] = 847907506
        --PAG_ZON_CIN_10_PP_RARE_1
        vehicles[274] = 1785461374
        --POR_918_RSR_11_PP_STOCK_1
        vehicles[275] = 3362615761
        vehicles[276] = 1491889756
        vehicles[277] = 74329220
        vehicles[278] = 2050041874
        vehicles[279] = 2035297976
        vehicles[280] = 2259933696
        vehicles[281] = 4020233018
        vehicles[282] = 2429649982
        --POR_918_RSR_11_PP1V1
        vehicles[283] = 3590803949
        vehicles[284] = 470621453
        vehicles[285] = 3564669780
        vehicles[286] = 358280095
        vehicles[287] = 3275213580
        vehicles[288] = 2051625406
        vehicles[289] = 1980565952
        vehicles[290] = 2585244432
        --POR_918_RSR_11_PP2V1
        vehicles[291] = 2455444527
        vehicles[292] = 1358334390
        vehicles[293] = 3150721719
        vehicles[294] = 2293722771
        vehicles[295] = 3732541420
        vehicles[296] = 2676860188
        vehicles[297] = 1188933131
        vehicles[298] = 994061469
        --POR_918_RSR_11_PP_RARE_1
        vehicles[299] = 2235038457
        --POR_918_RSR_11_PP_RUN
        vehicles[300] = 893260034
        --MCL_MP4_12C_12_E3
        vehicles[301] = 3456340490
        --AUD_R8_V10_10_PP_RUN
        vehicles[302] = 1078212109
        --AUD_R8_V10_10_AI_242
        vehicles[303] = 1231946819
        --AUD_R8_V10_10_AI_257
        vehicles[304] = 1506140079
        --CHE_VET_CBN_10_PP_RARE_1
        vehicles[305] = 1289781367
        --CHE_VET_CBN_10_NFS_E
        vehicles[306] = 1732803059
        --FOR_GT_STK_06_AI_246
        vehicles[307] = 1732090001
        --FOR_GT_STK_06_AI_247
        vehicles[308] = 343400313
        --LAM_GAL_VB_10_AI_291
        vehicles[309] = 398700111
        --LOT_EXI_260_10_AI_251
        vehicles[310] = 3413518135
        --MAZ_RX7_RZ_98_NFS_E
        vehicles[311] = 529645684
        --NIS_240_ZG_71_PP_RARE_1
        vehicles[312] = 4150176875
        --NIS_GTR_R32_91_PP_RARE_1
        vehicles[313] = 1279882972
        --NIS_GTR_STK_73_PP_RARE_1
        vehicles[314] = 1203603962
        --NIS_GTR_V_10_PP_RUN
        vehicles[315] = 501327745
        --POR_GT3_RS_10_AI_248
        vehicles[316] = 4134624293
        --POR_GT3_RS_10_PP_RARE_1
        vehicles[317] = 984573869
        --POR_GT3_RS_10_PP_RARE_2
        vehicles[318] = 996427356
        --VOL_GTI_MK1_76_PP_RARE_1
        vehicles[319] = 3720220186
        --BMW_M3_GTS_10_NFS_E
        vehicles[320] = 3979197479
        --SHE_DAY_COU_65_PP_RARE_1
        vehicles[321] = 4022012078
        --SUB_WRX_STI_09_PP_RARE_1
        vehicles[322] = 3590308002
        --FOR_MUS_BOS_12_PP_RARE_1
        vehicles[323] = 4214528836
        --CHE_EL_CAM_70_AI_266
        vehicles[324] = 3393955391
        --CHE_VET_CBN_10_AI_250
        vehicles[325] = 4036792314
        --CHE_VET_CBN_10_AI_300
        vehicles[326] = 656030015
        --NIS_370_Z_09_AI_258
        vehicles[327] = 4045851596
        --NIS_GTR_V_10_AI_245
        vehicles[328] = 4201754403
        --SHE_DAY_COU_65_AI_254
        vehicles[329] = 1201503826
        --SUB_WRX_STI_09_AI_249
        vehicles[330] = 3193966487
        --BMW_1M_COU_11_PP_RARE_1
        vehicles[331] = 1682648577
        --AUD_R8_V10_10_NFS_E
        vehicles[332] = 3064452558
        --BMW_M3_E30_90_PP_RARE_1
        vehicles[333] = 2320421064
        --CHE_CAM_ZL1_13_PP_RARE_1
        vehicles[334] = 1983307871
        --CHE_EL_CAM_70_PP_RARE_1
        vehicles[335] = 960019312
        --CHE_CAM_SS_67_PP_RARE_1
        vehicles[336] = 313312439
        --CHE_VET_CBN_10_PP_RUN
        vehicles[337] = 1143930682
        --FOR_FOC_RS_10_PP_RARE_1
        vehicles[338] = 699181181
        --FOR_GT_STK_06_NFS_E
        vehicles[339] = 1588264861
        --FOR_GT_STK_06_PP_RARE_1
        vehicles[340] = 1444633056
        --LAM_GAL_VB_10_NFS_E
        vehicles[341] = 3115752732
        --LOT_EVO_STK_10_PP_RARE_1
        vehicles[342] = 1821494394
        --LOT_EXI_260_10_PP_RARE_1
        vehicles[343] = 30590049
        --MAZ_RX7_RZ_98_PP_RARE_1
        vehicles[344] = 2688135082
        --MER_SLS_AMG_10_NFS_E
        vehicles[345] = 918776313
        --MER_SLS_AMG_10_PP_RARE_1
        vehicles[346] = 3990075021
        --MER_SLS_AMG_10_RIVAL
        vehicles[347] = 3367604003
        --NIS_S14_A_97_PP_RARE_1
        vehicles[348] = 1409617150
        --NIS_370_Z_09_PP_RARE_1
        vehicles[349] = 794975903
        --NIS_GTR_V_10_NFS_E
        vehicles[350] = 2056341605
        --NIS_GTR_V_10_PP_RARE_1
        vehicles[351] = 528049014
        --PON_FIR_STK_78_PP_RARE_1
        vehicles[352] = 3044389769
        --POR_991_S_12_PP_RARE_1
        vehicles[353] = 3279588277
        --REN_MEG_RS_10_PP_RARE_1
        vehicles[354] = 1861624512
        --SHE_DAY_COU_65_NFS_E
        vehicles[355] = 1095199585
        --TOY_SUP_STK_98_MARKETING_1
        vehicles[356] = 1222984308

        --EASTER EGG
        --LAMBORGHINI MIURA SV "RIVAL"
        vehicles[357] = 1891289054

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1663746137 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3471684760 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3589993730 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3083222042 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            writeInteger(first,495760540)
            writeInteger(second,1644473978)
            writeInteger(third,1560185875)
            if readInteger(first) == 495760540 and
                readInteger(second) == 1644473978 and
                readInteger(third) == 1560185875 then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 746773576 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3508062179 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1770516894 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3319259724 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local array = {}
            local t = {}
            X = my_random (t, 1, 357)
            array[1] = X
            writeInteger(first,vehicles[array[1]])
            if readInteger(first) == vehicles[array[1]] then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 570367103 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3084366756 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 272462180 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4045851596 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,332754079)
            if readInteger(first) == 332754079 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4214528836 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,3987291888)
            if readInteger(first) == 3987291888 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 703857006 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3268712543 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1214321547 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 502950628 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,3156570098)
            if readInteger(first) == 3156570098 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3149572385 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,3156570098)
            if readInteger(first) == 3156570098 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3229489595 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3418726804 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,1844033689)
            if readInteger(first) == 1844033689 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1732090001 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3393955391 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,495760540)
            if readInteger(first) == 495760540 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 757287967 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local array = {}
            local t = {}
            for i =1, 7 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2911404618 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2952613532 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3289858687 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3908753765 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1844033689 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local array = {}
            local t = {}
            X = my_random (t, 1, 357)
            array[1] = X
            --writeInteger(first,vehicles[array[1]])
            if readInteger(first) == vehicles[array[1]] then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3914415322 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 357)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        end
    end
end

s410 = createTimer(nil)
timer_onTimer(s410,Stage410)
timer_setInterval(s410, 500)
timer_setEnabled(s410, true)


[DISABLE]
timer_setEnabled(s410, false)
print "The Supercar Run Cars Swap Stage 4 to 10 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>862</ID>
          <Description>"SanFran"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
math.randomseed(os.time())
print "San Francisco Garage Supercar Car Select Randomizer timer enabled"
function SanFran()
    if readPointer("[[[[[027147B0]+344]+24]+4]+38]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[[027147B0]+344]+24]+4]+38]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 1165774027 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            fourth = lastCarClassID + 0x1C
            fifth = lastCarClassID + 0x24
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 366)
                array[i] = X
            end
            local vehicles = {}
            --AST_ONE_77_10_PP_STOCK_1
            vehicles[1] = 2351754525
            vehicles[2] = 1662806892
            vehicles[3] = 228872290
            vehicles[4] = 1964104069
            vehicles[5] = 2344597012
            vehicles[6] = 2132135922
            vehicles[7] = 1440933530
            vehicles[8] = 549781442
            --AST_ONE_77_10_PP1V1
            vehicles[9] = 613611658
            vehicles[10] = 813015225
            vehicles[11] = 3419515662
            vehicles[12] = 2461199550
            vehicles[13] = 1159870676
            vehicles[14] = 1797540164
            vehicles[15] = 2593782817
            vehicles[16] = 3779064502
            --AST_ONE_77_10_PP2V1
            vehicles[17] = 2815320120
            vehicles[18] = 1595550620
            vehicles[19] = 2739858695
            vehicles[20] = 3707827774
            vehicles[21] = 781260459
            vehicles[22] = 539917869
            vehicles[23] = 3665518132
            vehicles[24] = 334451358
            --AST_ONE_77_10_RIVAL_1
            vehicles[25] = 2723042599
            --POR_CAR_GT_08_PP_STOCK_1
            vehicles[26] = 2168567350
            vehicles[27] = 2814841447
            vehicles[28] = 2326235097
            vehicles[29] = 1070731952
            vehicles[30] = 1467600787
            vehicles[31] = 2519948613
            vehicles[32] = 2060072065
            vehicles[33] = 4281187630
            --POR_CAR_GT_08_PP1V1
            vehicles[34] = 583962154
            vehicles[35] = 678369750
            vehicles[36] = 2458568756
            vehicles[37] = 1728488156
            vehicles[38] = 152393893
            vehicles[39] = 4216707801
            vehicles[40] = 3701910843
            vehicles[41] = 1108161064
            --BUG_VEY_SS_10_PP_STOCK_1
            vehicles[42] = 1396925995
            vehicles[43] = 233386615
            vehicles[44] = 198885591
            vehicles[45] = 2508479814
            vehicles[46] = 38889236
            vehicles[47] = 2998207530
            vehicles[48] = 222257381
            vehicles[49] = 3456734173
            --BUG_VEY_SS_10_PP1V1
            vehicles[50] = 397414533
            vehicles[51] = 13600042
            vehicles[52] = 1173801304
            vehicles[53] = 2683073109
            vehicles[54] = 3414920866
            vehicles[55] = 4061025962
            vehicles[56] = 4269471868
            vehicles[57] = 1201919218
            --GUM_APO_S_11_PP_STOCK_1
            vehicles[58] = 4194888242
            vehicles[59] = 2929300545
            vehicles[60] = 3513026456
            vehicles[61] = 2656167781
            vehicles[62] = 1027466826
            vehicles[63] = 3035566623
            vehicles[64] = 2448020030
            vehicles[65] = 1169312998
            --GUM_APO_S_11_PP1V1
            vehicles[66] = 2604599393
            vehicles[67] = 1428535737
            vehicles[68] = 1269182954
            vehicles[69] = 3445163782
            vehicles[70] = 1267634863
            vehicles[71] = 1972342918
            vehicles[72] = 2708126175
            vehicles[73] = 2599136713
            --HEN_VEN_GT_11_PP_STOCK_1
            vehicles[74] = 1889692556
            vehicles[75] = 2875939421
            vehicles[76] = 1843403582
            vehicles[77] = 1559471646
            vehicles[78] = 1293973268
            vehicles[79] = 1435683144
            vehicles[80] = 2573564796
            vehicles[81] = 2334641747
            --HEN_VEN_GT_11_PP1V1
            vehicles[82] = 1532349533
            vehicles[83] = 1612734426
            vehicles[84] = 1350165957
            vehicles[85] = 3838522613
            vehicles[86] = 3126269201
            vehicles[87] = 2902535361
            vehicles[88] = 42442522
            vehicles[89] = 284782573
            --KOE_AGE_R_11_PP_STOCK_1
            vehicles[90] = 938384918
            vehicles[91] = 3882992039
            vehicles[92] = 1371105745
            vehicles[93] = 2626688083
            vehicles[94] = 1231578851
            vehicles[95] = 3884005823
            vehicles[96] = 789750505
            vehicles[97] = 4215073769
            --KOE_AGE_R_11_PP1V1
            vehicles[98] = 450562262
            vehicles[99] = 3174728285
            vehicles[100] = 3125779387
            vehicles[101] = 3260662067
            vehicles[102] = 132303528
            vehicles[103] = 3392822886
            vehicles[104] = 4175699004
            vehicles[105] = 1147481775
            --LAM_AVE_700_12_PP_STOCK_1
            vehicles[106] = 228156588
            vehicles[107] = 2629373704
            vehicles[108] = 3963234612
            vehicles[109] = 2534942175
            vehicles[110] = 1033287156
            vehicles[111] = 1605709038
            vehicles[112] = 1956113471
            vehicles[113] = 3262842592
            --LAM_AVE_700_12_PP1V1
            vehicles[114] = 1630069578
            vehicles[115] = 1893492524
            vehicles[116] = 2320472582
            vehicles[117] = 1033194420
            vehicles[118] = 3418403022
            vehicles[119] = 3911160656
            vehicles[120] = 2473793792
            vehicles[121] = 3114695091
            --LAM_AVE_700_12_PP2V1
            vehicles[122] = 871581221
            vehicles[123] = 2858063602
            vehicles[124] = 627541664
            vehicles[125] = 4249870811
            vehicles[126] = 2456766280
            vehicles[127] = 4269161378
            vehicles[128] = 1418212893
            vehicles[129] = 961451823
            --LAM_AVE_700_12_PP_RUN
            vehicles[130] = 2196261666
            --LAM_MUR_SV_10_PP_STOCK_1
            vehicles[131] = 423002076
            vehicles[132] = 1164602375
            vehicles[133] = 2599236784
            vehicles[134] = 3259253348
            vehicles[135] = 3853253796
            vehicles[136] = 2117850692
            vehicles[137] = 2619259567
            vehicles[138] = 3214136501
            --LAM_MUR_SV_10_PP1V1
            vehicles[139] = 3389491414
            vehicles[140] = 1968726675
            vehicles[141] = 2504059847
            vehicles[142] = 329725607
            vehicles[143] = 4238989743
            vehicles[144] = 4205372699
            vehicles[145] = 3488973739
            vehicles[146] = 1567464013
            --LAM_MUR_SV_10_PP2V1
            vehicles[147] = 3343835678
            vehicles[148] = 2061181417
            vehicles[149] = 2495288543
            vehicles[150] = 4073003222
            vehicles[151] = 2322578206
            vehicles[152] = 662600563
            vehicles[153] = 670388343
            vehicles[154] = 1597875720
            --LAM_MUR_SV_10_PP_RARE_1
            vehicles[155] = 2854099895
            --LAM_SES_ELE_11_PP_STOCK_1
            vehicles[156] = 3037763135
            --LAM_SES_ELE_11_PP1V1
            vehicles[157] = 663647969
            vehicles[158] = 2362038992
            vehicles[159] = 2043180730
            vehicles[160] = 904850386
            vehicles[161] = 1277500942
            vehicles[162] = 2615408399
            vehicles[163] = 1287448061
            vehicles[164] = 1758221874
            --LAM_SES_ELE_11_PP2V1
            vehicles[165] = 386899547
            vehicles[166] = 1627756866
            vehicles[167] = 3796640221
            vehicles[168] = 2910801194
            vehicles[169] = 4108800856
            vehicles[170] = 2672444790
            vehicles[171] = 2380859159
            vehicles[172] = 2431781612
            --LAM_SES_ELE_11_PP_RARE_1
            vehicles[173] = 1021146513
            --MCL_F1_STK_94_PP_STOCK_1
            vehicles[174] = 3082609147
            vehicles[175] = 1842326981
            vehicles[176] = 3597153073
            vehicles[177] = 2027198581
            vehicles[178] = 4061750909
            vehicles[179] = 3284152259
            vehicles[180] = 3971845986
            vehicles[181] = 2188451802
            --MCL_F1_STK_94_PP1V1
            vehicles[182] = 2188732611
            vehicles[183] = 8847892
            vehicles[184] = 2546659436
            vehicles[185] = 4201908254
            vehicles[186] = 3309128826
            vehicles[187] = 3763200407
            vehicles[188] = 734242523
            vehicles[189] = 4147231431
            --MCL_F1_STK_94_PP2V1
            vehicles[190] = 3451952857
            vehicles[191] = 2727696005
            vehicles[192] = 2569286113
            vehicles[193] = 179413785
            vehicles[194] = 2797745784
            vehicles[195] = 4269482447
            vehicles[196] = 1346627002
            vehicles[197] = 3904972435
            --MCL_MP4_12C_12_PP_STOCK_1
            vehicles[198] = 2658400503
            vehicles[199] = 4193773627
            vehicles[200] = 1619287845
            vehicles[201] = 939656905
            vehicles[202] = 2000101387
            vehicles[203] = 2985567767
            vehicles[204] = 1596404988
            vehicles[205] = 3225073129
            --MCL_MP4_12C_12_PP1V1
            vehicles[206] = 3131107123
            vehicles[207] = 4294611947
            vehicles[208] = 3922078657
            vehicles[209] = 1057106373
            vehicles[210] = 3144079377
            vehicles[211] = 3471408279
            vehicles[212] = 130378825
            vehicles[213] = 4082318510
            --MCL_MP4_12C_12_PP2V1
            vehicles[214] = 2541095939
            vehicles[215] = 91889143
            vehicles[216] = 1017936786
            vehicles[217] = 3013363001
            vehicles[218] = 1204401820
            vehicles[219] = 3568224351
            vehicles[220] = 702147282
            vehicles[221] = 1587206021
            --MCL_MP4_12C_12_PP_RARE_1
            vehicles[222] = 2166586403
            --MCL_MP4_12C_12_NFS_E
            vehicles[223] = 3784919988
            --PAG_HUA_STK_11_PP_STOCK_1
            vehicles[224] = 801824035
            vehicles[225] = 3644372353
            vehicles[226] = 1000995635
            vehicles[227] = 2301704731
            vehicles[228] = 1033940261
            vehicles[229] = 2259031478
            vehicles[230] = 1536272541
            vehicles[231] = 2571694936
            --PAG_HUA_STK_11_PP1V1
            vehicles[232] = 238433599
            vehicles[233] = 3388131117
            vehicles[234] = 270572032
            vehicles[235] = 429465421
            vehicles[236] = 1363587384
            vehicles[237] = 2904320215
            vehicles[238] = 533716564
            vehicles[239] = 1368115291
            --PAG_HUA_STK_11_PP2V1
            vehicles[240] = 1008774409
            vehicles[241] = 3263622175
            vehicles[242] = 911442981
            vehicles[243] = 1504752564
            vehicles[244] = 2112395282
            vehicles[245] = 3901405701
            vehicles[246] = 934423389
            vehicles[247] = 885036472
            --PAG_HUA_STK_11_PP_RARE_1
            vehicles[248] = 2149624056
            --PAG_HUA_STK_11_PP_RUN
            vehicles[249] = 671513072
            --PAG_ZON_CIN_10_PP_STOCK_1
            vehicles[250] = 3444720201
            vehicles[251] = 4205485260
            vehicles[252] = 869131265
            vehicles[253] = 590551761
            vehicles[254] = 300480834
            vehicles[255] = 1621994448
            vehicles[256] = 989985070
            vehicles[257] = 1285392907
            --PAG_ZON_CIN_10_PP1V1
            vehicles[258] = 749556118
            vehicles[259] = 2979651631
            vehicles[260] = 4244524106
            vehicles[261] = 2645559681
            vehicles[262] = 3775521792
            vehicles[263] = 3496677447
            vehicles[264] = 316886774
            vehicles[265] = 273045201
            --PAG_ZON_CIN_10_PP2V1
            vehicles[266] = 2030547104
            vehicles[267] = 265034312
            vehicles[268] = 268954836
            vehicles[269] = 1431801290
            vehicles[270] = 1746156725
            vehicles[271] = 2288285211
            vehicles[272] = 463794150
            vehicles[273] = 847907506
            --PAG_ZON_CIN_10_PP_RARE_1
            vehicles[274] = 1785461374
            --POR_918_RSR_11_PP_STOCK_1
            vehicles[275] = 3362615761
            vehicles[276] = 1491889756
            vehicles[277] = 74329220
            vehicles[278] = 2050041874
            vehicles[279] = 2035297976
            vehicles[280] = 2259933696
            vehicles[281] = 4020233018
            vehicles[282] = 2429649982
            --POR_918_RSR_11_PP1V1
            vehicles[283] = 3590803949
            vehicles[284] = 470621453
            vehicles[285] = 3564669780
            vehicles[286] = 358280095
            vehicles[287] = 3275213580
            vehicles[288] = 2051625406
            vehicles[289] = 1980565952
            vehicles[290] = 2585244432
            --POR_918_RSR_11_PP2V1
            vehicles[291] = 2455444527
            vehicles[292] = 1358334390
            vehicles[293] = 3150721719
            vehicles[294] = 2293722771
            vehicles[295] = 3732541420
            vehicles[296] = 2676860188
            vehicles[297] = 1188933131
            vehicles[298] = 994061469
            --POR_918_RSR_11_PP_RARE_1
            vehicles[299] = 2235038457
            --POR_918_RSR_11_PP_RUN
            vehicles[300] = 893260034
            --AUD_R8_V10_10_PP_RUN
            vehicles[301] = 1078212109
            --CHE_VET_CBN_10_PP_RARE_1
            vehicles[302] = 1289781367
            --CHE_VET_CBN_10_NFS_E
            vehicles[303] = 1732803059
            --MAZ_RX7_RZ_98_NFS_E
            vehicles[304] = 529645684
            --NIS_240_ZG_71_PP_RARE_1
            vehicles[305] = 4150176875
            --NIS_GTR_R32_91_PP_RARE_1
            vehicles[306] = 1279882972
            --NIS_GTR_STK_73_PP_RARE_1
            vehicles[307] = 1203603962
            --NIS_GTR_V_10_PP_RUN
            vehicles[308] = 501327745
            --POR_GT3_RS_10_PP_RARE_1
            vehicles[309] = 984573869
            --POR_GT3_RS_10_PP_RARE_2
            vehicles[310] = 996427356
            --VOL_GTI_MK1_76_PP_RARE_1
            vehicles[311] = 3720220186
            --BMW_M3_GTS_10_NFS_E
            vehicles[312] = 3979197479
            --SHE_DAY_COU_65_PP_RARE_1
            vehicles[313] = 4022012078
            --SUB_WRX_STI_09_PP_RARE_1
            vehicles[314] = 3590308002
            --FOR_MUS_BOS_12_PP_RARE_1
            vehicles[315] = 4214528836
            --BMW_1M_COU_11_PP_RARE_1
            vehicles[316] = 1682648577
            --AUD_R8_V10_10_NFS_E
            vehicles[317] = 3064452558
            --BMW_M3_E30_90_PP_RARE_1
            vehicles[318] = 2320421064
            --CHE_CAM_ZL1_13_PP_RARE_1
            vehicles[319] = 1983307871
            --CHE_EL_CAM_70_PP_RARE_1
            vehicles[320] = 960019312
            --CHE_CAM_SS_67_PP_RARE_1
            vehicles[321] = 313312439
            --CHE_VET_CBN_10_PP_RUN
            vehicles[322] = 1143930682
            --FOR_FOC_RS_10_PP_RARE_1
            vehicles[323] = 699181181
            --FOR_GT_STK_06_NFS_E
            vehicles[324] = 1588264861
            --FOR_GT_STK_06_PP_RARE_1
            vehicles[325] = 1444633056
            --LAM_GAL_VB_10_NFS_E
            vehicles[326] = 3115752732
            --LOT_EVO_STK_10_PP_RARE_1
            vehicles[327] = 1821494394
            --LOT_EXI_260_10_PP_RARE_1
            vehicles[328] = 30590049
            --MAZ_RX7_RZ_98_PP_RARE_1
            vehicles[329] = 2688135082
            --MER_SLS_AMG_10_NFS_E
            vehicles[330] = 918776313
            --MER_SLS_AMG_10_PP_RARE_1
            vehicles[331] = 3990075021
            --MER_SLS_AMG_10_RIVAL
            vehicles[332] = 3367604003
            --NIS_S14_A_97_PP_RARE_1
            vehicles[333] = 1409617150
            --NIS_370_Z_09_PP_RARE_1
            vehicles[334] = 794975903
            --NIS_GTR_V_10_NFS_E
            vehicles[335] = 2056341605
            --NIS_GTR_V_10_PP_RARE_1
            vehicles[336] = 528049014
            --PON_FIR_STK_78_PP_RARE_1
            vehicles[337] = 3044389769
            --POR_991_S_12_PP_RARE_1
            vehicles[338] = 3279588277
            --REN_MEG_RS_10_PP_RARE_1
            vehicles[339] = 1861624512
            --SHE_DAY_COU_65_NFS_E
            vehicles[340] = 1095199585
            --TOY_SUP_STK_98_MARKETING_1
            vehicles[341] = 1222984308

            --CUSTOM MADE BY _mRally2
            --POR_991_S_12_PP_RUN
            vehicles[342] = 2276214493
            --NIS_240_ZG_71_NFS_E
            vehicles[343] = 3251408801
            --FOR_FOC_RS_10_NFS_E
            vehicles[344] = 224517341
            --TOY_SUP_STK_98_NFS_E
            vehicles[345] = 155202617
            --NIS_GTR_R32_91_PRESALE_1
            vehicles[346] = 1851197596
            --POR_GT3_RS_10_PP_STOCK_1
            vehicles[347] = 3662254698
            --POR_GT3_RS_10_PP_STOCK_2
            vehicles[348] = 2375627941
            --MAZ_RX7_RZ_98_PP_STOCK_1
            vehicles[349] = 1198552022
            --MAZ_RX7_RZ_98_PP_STOCK_2
            vehicles[350] = 1807438366
            --MAZ_RX7_RZ_98_PP_STOCK_3
            vehicles[351] = 1376730081
            --NIS_370_Z_09_PP_STOCK_1
            vehicles[352] = 3231208053
            --NIS_370_Z_09_PP_STOCK_2
            vehicles[353] = 2656445332
            --NIS_370_Z_09_PP_STOCK_3
            vehicles[354] = 3846449541
            --NIS_GTR_R35_08_PP_STOCK_1
            vehicles[355] = 1264558075
            --NIS_GTR_R35_08_PP_STOCK_2
            vehicles[356] = 1511061930
            --NIS_GTR_R35_08_PP_STOCK_3
            vehicles[357] = 360109402
            --NIS_GTR_STK_73_NFS_E
            vehicles[358] = 907975255
            --SUB_WRX_STI_09_NFS_E
            vehicles[359] = 3408409694
            --LAM_COU_QV_85_PP_STOCK_1
            vehicles[360] = 2031156362
            --LAM_COU_QV_85_PP_STOCK_2
            vehicles[361] = 2296894266
            --LAM_COU_QV_85_PP_STOCK_3
            vehicles[362] = 2397773668
            --LEX_LFA_STK_10_PP_STOCK_1
            vehicles[363] = 1242417971
            --LEX_LFA_STK_10_PP_STOCK_2
            vehicles[364] = 1501282514
            --LEX_LFA_STK_10_PP_STOCK_3
            vehicles[365] = 1766454385
            --LEX_LFA_STK_10_PP_STOCK_4
            vehicles[366] = 3974442167

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] then
                print "The swap has completed successfully"
            end
        end
    end
end

sf = createTimer(nil)
timer_onTimer(sf,SanFran)
timer_setInterval(sf, 100)
timer_setEnabled(sf, true)

[DISABLE]
timer_setEnabled(sf, false)
print "San Francisco Garage Supercar Car Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>863</ID>
          <Description>"LasVegas"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
math.randomseed(os.time())
print "Las Vegas East Supercar Car Select Randomizer timer enabled"
function LasVegas()
    if readPointer("[[[[027147B0]+56C]+64]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[027147B0]+56C]+64]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3662254698 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 366)
                array[i] = X
            end
            local vehicles = {}
            --AST_ONE_77_10_PP_STOCK_1
            vehicles[1] = 2351754525
            vehicles[2] = 1662806892
            vehicles[3] = 228872290
            vehicles[4] = 1964104069
            vehicles[5] = 2344597012
            vehicles[6] = 2132135922
            vehicles[7] = 1440933530
            vehicles[8] = 549781442
            --AST_ONE_77_10_PP1V1
            vehicles[9] = 613611658
            vehicles[10] = 813015225
            vehicles[11] = 3419515662
            vehicles[12] = 2461199550
            vehicles[13] = 1159870676
            vehicles[14] = 1797540164
            vehicles[15] = 2593782817
            vehicles[16] = 3779064502
            --AST_ONE_77_10_PP2V1
            vehicles[17] = 2815320120
            vehicles[18] = 1595550620
            vehicles[19] = 2739858695
            vehicles[20] = 3707827774
            vehicles[21] = 781260459
            vehicles[22] = 539917869
            vehicles[23] = 3665518132
            vehicles[24] = 334451358
            --AST_ONE_77_10_RIVAL_1
            vehicles[25] = 2723042599
            --POR_CAR_GT_08_PP_STOCK_1
            vehicles[26] = 2168567350
            vehicles[27] = 2814841447
            vehicles[28] = 2326235097
            vehicles[29] = 1070731952
            vehicles[30] = 1467600787
            vehicles[31] = 2519948613
            vehicles[32] = 2060072065
            vehicles[33] = 4281187630
            --POR_CAR_GT_08_PP1V1
            vehicles[34] = 583962154
            vehicles[35] = 678369750
            vehicles[36] = 2458568756
            vehicles[37] = 1728488156
            vehicles[38] = 152393893
            vehicles[39] = 4216707801
            vehicles[40] = 3701910843
            vehicles[41] = 1108161064
            --BUG_VEY_SS_10_PP_STOCK_1
            vehicles[42] = 1396925995
            vehicles[43] = 233386615
            vehicles[44] = 198885591
            vehicles[45] = 2508479814
            vehicles[46] = 38889236
            vehicles[47] = 2998207530
            vehicles[48] = 222257381
            vehicles[49] = 3456734173
            --BUG_VEY_SS_10_PP1V1
            vehicles[50] = 397414533
            vehicles[51] = 13600042
            vehicles[52] = 1173801304
            vehicles[53] = 2683073109
            vehicles[54] = 3414920866
            vehicles[55] = 4061025962
            vehicles[56] = 4269471868
            vehicles[57] = 1201919218
            --GUM_APO_S_11_PP_STOCK_1
            vehicles[58] = 4194888242
            vehicles[59] = 2929300545
            vehicles[60] = 3513026456
            vehicles[61] = 2656167781
            vehicles[62] = 1027466826
            vehicles[63] = 3035566623
            vehicles[64] = 2448020030
            vehicles[65] = 1169312998
            --GUM_APO_S_11_PP1V1
            vehicles[66] = 2604599393
            vehicles[67] = 1428535737
            vehicles[68] = 1269182954
            vehicles[69] = 3445163782
            vehicles[70] = 1267634863
            vehicles[71] = 1972342918
            vehicles[72] = 2708126175
            vehicles[73] = 2599136713
            --HEN_VEN_GT_11_PP_STOCK_1
            vehicles[74] = 1889692556
            vehicles[75] = 2875939421
            vehicles[76] = 1843403582
            vehicles[77] = 1559471646
            vehicles[78] = 1293973268
            vehicles[79] = 1435683144
            vehicles[80] = 2573564796
            vehicles[81] = 2334641747
            --HEN_VEN_GT_11_PP1V1
            vehicles[82] = 1532349533
            vehicles[83] = 1612734426
            vehicles[84] = 1350165957
            vehicles[85] = 3838522613
            vehicles[86] = 3126269201
            vehicles[87] = 2902535361
            vehicles[88] = 42442522
            vehicles[89] = 284782573
            --KOE_AGE_R_11_PP_STOCK_1
            vehicles[90] = 938384918
            vehicles[91] = 3882992039
            vehicles[92] = 1371105745
            vehicles[93] = 2626688083
            vehicles[94] = 1231578851
            vehicles[95] = 3884005823
            vehicles[96] = 789750505
            vehicles[97] = 4215073769
            --KOE_AGE_R_11_PP1V1
            vehicles[98] = 450562262
            vehicles[99] = 3174728285
            vehicles[100] = 3125779387
            vehicles[101] = 3260662067
            vehicles[102] = 132303528
            vehicles[103] = 3392822886
            vehicles[104] = 4175699004
            vehicles[105] = 1147481775
            --LAM_AVE_700_12_PP_STOCK_1
            vehicles[106] = 228156588
            vehicles[107] = 2629373704
            vehicles[108] = 3963234612
            vehicles[109] = 2534942175
            vehicles[110] = 1033287156
            vehicles[111] = 1605709038
            vehicles[112] = 1956113471
            vehicles[113] = 3262842592
            --LAM_AVE_700_12_PP1V1
            vehicles[114] = 1630069578
            vehicles[115] = 1893492524
            vehicles[116] = 2320472582
            vehicles[117] = 1033194420
            vehicles[118] = 3418403022
            vehicles[119] = 3911160656
            vehicles[120] = 2473793792
            vehicles[121] = 3114695091
            --LAM_AVE_700_12_PP2V1
            vehicles[122] = 871581221
            vehicles[123] = 2858063602
            vehicles[124] = 627541664
            vehicles[125] = 4249870811
            vehicles[126] = 2456766280
            vehicles[127] = 4269161378
            vehicles[128] = 1418212893
            vehicles[129] = 961451823
            --LAM_AVE_700_12_PP_RUN
            vehicles[130] = 2196261666
            --LAM_MUR_SV_10_PP_STOCK_1
            vehicles[131] = 423002076
            vehicles[132] = 1164602375
            vehicles[133] = 2599236784
            vehicles[134] = 3259253348
            vehicles[135] = 3853253796
            vehicles[136] = 2117850692
            vehicles[137] = 2619259567
            vehicles[138] = 3214136501
            --LAM_MUR_SV_10_PP1V1
            vehicles[139] = 3389491414
            vehicles[140] = 1968726675
            vehicles[141] = 2504059847
            vehicles[142] = 329725607
            vehicles[143] = 4238989743
            vehicles[144] = 4205372699
            vehicles[145] = 3488973739
            vehicles[146] = 1567464013
            --LAM_MUR_SV_10_PP2V1
            vehicles[147] = 3343835678
            vehicles[148] = 2061181417
            vehicles[149] = 2495288543
            vehicles[150] = 4073003222
            vehicles[151] = 2322578206
            vehicles[152] = 662600563
            vehicles[153] = 670388343
            vehicles[154] = 1597875720
            --LAM_MUR_SV_10_PP_RARE_1
            vehicles[155] = 2854099895
            --LAM_SES_ELE_11_PP_STOCK_1
            vehicles[156] = 3037763135
            --LAM_SES_ELE_11_PP1V1
            vehicles[157] = 663647969
            vehicles[158] = 2362038992
            vehicles[159] = 2043180730
            vehicles[160] = 904850386
            vehicles[161] = 1277500942
            vehicles[162] = 2615408399
            vehicles[163] = 1287448061
            vehicles[164] = 1758221874
            --LAM_SES_ELE_11_PP2V1
            vehicles[165] = 386899547
            vehicles[166] = 1627756866
            vehicles[167] = 3796640221
            vehicles[168] = 2910801194
            vehicles[169] = 4108800856
            vehicles[170] = 2672444790
            vehicles[171] = 2380859159
            vehicles[172] = 2431781612
            --LAM_SES_ELE_11_PP_RARE_1
            vehicles[173] = 1021146513
            --MCL_F1_STK_94_PP_STOCK_1
            vehicles[174] = 3082609147
            vehicles[175] = 1842326981
            vehicles[176] = 3597153073
            vehicles[177] = 2027198581
            vehicles[178] = 4061750909
            vehicles[179] = 3284152259
            vehicles[180] = 3971845986
            vehicles[181] = 2188451802
            --MCL_F1_STK_94_PP1V1
            vehicles[182] = 2188732611
            vehicles[183] = 8847892
            vehicles[184] = 2546659436
            vehicles[185] = 4201908254
            vehicles[186] = 3309128826
            vehicles[187] = 3763200407
            vehicles[188] = 734242523
            vehicles[189] = 4147231431
            --MCL_F1_STK_94_PP2V1
            vehicles[190] = 3451952857
            vehicles[191] = 2727696005
            vehicles[192] = 2569286113
            vehicles[193] = 179413785
            vehicles[194] = 2797745784
            vehicles[195] = 4269482447
            vehicles[196] = 1346627002
            vehicles[197] = 3904972435
            --MCL_MP4_12C_12_PP_STOCK_1
            vehicles[198] = 2658400503
            vehicles[199] = 4193773627
            vehicles[200] = 1619287845
            vehicles[201] = 939656905
            vehicles[202] = 2000101387
            vehicles[203] = 2985567767
            vehicles[204] = 1596404988
            vehicles[205] = 3225073129
            --MCL_MP4_12C_12_PP1V1
            vehicles[206] = 3131107123
            vehicles[207] = 4294611947
            vehicles[208] = 3922078657
            vehicles[209] = 1057106373
            vehicles[210] = 3144079377
            vehicles[211] = 3471408279
            vehicles[212] = 130378825
            vehicles[213] = 4082318510
            --MCL_MP4_12C_12_PP2V1
            vehicles[214] = 2541095939
            vehicles[215] = 91889143
            vehicles[216] = 1017936786
            vehicles[217] = 3013363001
            vehicles[218] = 1204401820
            vehicles[219] = 3568224351
            vehicles[220] = 702147282
            vehicles[221] = 1587206021
            --MCL_MP4_12C_12_PP_RARE_1
            vehicles[222] = 2166586403
            --MCL_MP4_12C_12_NFS_E
            vehicles[223] = 3784919988
            --PAG_HUA_STK_11_PP_STOCK_1
            vehicles[224] = 801824035
            vehicles[225] = 3644372353
            vehicles[226] = 1000995635
            vehicles[227] = 2301704731
            vehicles[228] = 1033940261
            vehicles[229] = 2259031478
            vehicles[230] = 1536272541
            vehicles[231] = 2571694936
            --PAG_HUA_STK_11_PP1V1
            vehicles[232] = 238433599
            vehicles[233] = 3388131117
            vehicles[234] = 270572032
            vehicles[235] = 429465421
            vehicles[236] = 1363587384
            vehicles[237] = 2904320215
            vehicles[238] = 533716564
            vehicles[239] = 1368115291
            --PAG_HUA_STK_11_PP2V1
            vehicles[240] = 1008774409
            vehicles[241] = 3263622175
            vehicles[242] = 911442981
            vehicles[243] = 1504752564
            vehicles[244] = 2112395282
            vehicles[245] = 3901405701
            vehicles[246] = 934423389
            vehicles[247] = 885036472
            --PAG_HUA_STK_11_PP_RARE_1
            vehicles[248] = 2149624056
            --PAG_HUA_STK_11_PP_RUN
            vehicles[249] = 671513072
            --PAG_ZON_CIN_10_PP_STOCK_1
            vehicles[250] = 3444720201
            vehicles[251] = 4205485260
            vehicles[252] = 869131265
            vehicles[253] = 590551761
            vehicles[254] = 300480834
            vehicles[255] = 1621994448
            vehicles[256] = 989985070
            vehicles[257] = 1285392907
            --PAG_ZON_CIN_10_PP1V1
            vehicles[258] = 749556118
            vehicles[259] = 2979651631
            vehicles[260] = 4244524106
            vehicles[261] = 2645559681
            vehicles[262] = 3775521792
            vehicles[263] = 3496677447
            vehicles[264] = 316886774
            vehicles[265] = 273045201
            --PAG_ZON_CIN_10_PP2V1
            vehicles[266] = 2030547104
            vehicles[267] = 265034312
            vehicles[268] = 268954836
            vehicles[269] = 1431801290
            vehicles[270] = 1746156725
            vehicles[271] = 2288285211
            vehicles[272] = 463794150
            vehicles[273] = 847907506
            --PAG_ZON_CIN_10_PP_RARE_1
            vehicles[274] = 1785461374
            --POR_918_RSR_11_PP_STOCK_1
            vehicles[275] = 3362615761
            vehicles[276] = 1491889756
            vehicles[277] = 74329220
            vehicles[278] = 2050041874
            vehicles[279] = 2035297976
            vehicles[280] = 2259933696
            vehicles[281] = 4020233018
            vehicles[282] = 2429649982
            --POR_918_RSR_11_PP1V1
            vehicles[283] = 3590803949
            vehicles[284] = 470621453
            vehicles[285] = 3564669780
            vehicles[286] = 358280095
            vehicles[287] = 3275213580
            vehicles[288] = 2051625406
            vehicles[289] = 1980565952
            vehicles[290] = 2585244432
            --POR_918_RSR_11_PP2V1
            vehicles[291] = 2455444527
            vehicles[292] = 1358334390
            vehicles[293] = 3150721719
            vehicles[294] = 2293722771
            vehicles[295] = 3732541420
            vehicles[296] = 2676860188
            vehicles[297] = 1188933131
            vehicles[298] = 994061469
            --POR_918_RSR_11_PP_RARE_1
            vehicles[299] = 2235038457
            --POR_918_RSR_11_PP_RUN
            vehicles[300] = 893260034
            --AUD_R8_V10_10_PP_RUN
            vehicles[301] = 1078212109
            --CHE_VET_CBN_10_PP_RARE_1
            vehicles[302] = 1289781367
            --CHE_VET_CBN_10_NFS_E
            vehicles[303] = 1732803059
            --MAZ_RX7_RZ_98_NFS_E
            vehicles[304] = 529645684
            --NIS_240_ZG_71_PP_RARE_1
            vehicles[305] = 4150176875
            --NIS_GTR_R32_91_PP_RARE_1
            vehicles[306] = 1279882972
            --NIS_GTR_STK_73_PP_RARE_1
            vehicles[307] = 1203603962
            --NIS_GTR_V_10_PP_RUN
            vehicles[308] = 501327745
            --POR_GT3_RS_10_PP_RARE_1
            vehicles[309] = 984573869
            --POR_GT3_RS_10_PP_RARE_2
            vehicles[310] = 996427356
            --VOL_GTI_MK1_76_PP_RARE_1
            vehicles[311] = 3720220186
            --BMW_M3_GTS_10_NFS_E
            vehicles[312] = 3979197479
            --SHE_DAY_COU_65_PP_RARE_1
            vehicles[313] = 4022012078
            --SUB_WRX_STI_09_PP_RARE_1
            vehicles[314] = 3590308002
            --FOR_MUS_BOS_12_PP_RARE_1
            vehicles[315] = 4214528836
            --BMW_1M_COU_11_PP_RARE_1
            vehicles[316] = 1682648577
            --AUD_R8_V10_10_NFS_E
            vehicles[317] = 3064452558
            --BMW_M3_E30_90_PP_RARE_1
            vehicles[318] = 2320421064
            --CHE_CAM_ZL1_13_PP_RARE_1
            vehicles[319] = 1983307871
            --CHE_EL_CAM_70_PP_RARE_1
            vehicles[320] = 960019312
            --CHE_CAM_SS_67_PP_RARE_1
            vehicles[321] = 313312439
            --CHE_VET_CBN_10_PP_RUN
            vehicles[322] = 1143930682
            --FOR_FOC_RS_10_PP_RARE_1
            vehicles[323] = 699181181
            --FOR_GT_STK_06_NFS_E
            vehicles[324] = 1588264861
            --FOR_GT_STK_06_PP_RARE_1
            vehicles[325] = 1444633056
            --LAM_GAL_VB_10_NFS_E
            vehicles[326] = 3115752732
            --LOT_EVO_STK_10_PP_RARE_1
            vehicles[327] = 1821494394
            --LOT_EXI_260_10_PP_RARE_1
            vehicles[328] = 30590049
            --MAZ_RX7_RZ_98_PP_RARE_1
            vehicles[329] = 2688135082
            --MER_SLS_AMG_10_NFS_E
            vehicles[330] = 918776313
            --MER_SLS_AMG_10_PP_RARE_1
            vehicles[331] = 3990075021
            --MER_SLS_AMG_10_RIVAL
            vehicles[332] = 3367604003
            --NIS_S14_A_97_PP_RARE_1
            vehicles[333] = 1409617150
            --NIS_370_Z_09_PP_RARE_1
            vehicles[334] = 794975903
            --NIS_GTR_V_10_NFS_E
            vehicles[335] = 2056341605
            --NIS_GTR_V_10_PP_RARE_1
            vehicles[336] = 528049014
            --PON_FIR_STK_78_PP_RARE_1
            vehicles[337] = 3044389769
            --POR_991_S_12_PP_RARE_1
            vehicles[338] = 3279588277
            --REN_MEG_RS_10_PP_RARE_1
            vehicles[339] = 1861624512
            --SHE_DAY_COU_65_NFS_E
            vehicles[340] = 1095199585
            --TOY_SUP_STK_98_MARKETING_1
            vehicles[341] = 1222984308

            --CUSTOM MADE BY _mRally2
            --POR_991_S_12_PP_RUN
            vehicles[342] = 2276214493
            --NIS_240_ZG_71_NFS_E
            vehicles[343] = 3251408801
            --FOR_FOC_RS_10_NFS_E
            vehicles[344] = 224517341
            --TOY_SUP_STK_98_NFS_E
            vehicles[345] = 155202617
            --NIS_GTR_R32_91_PRESALE_1
            vehicles[346] = 1851197596
            --POR_GT3_RS_10_PP_STOCK_1
            vehicles[347] = 3662254698
            --POR_GT3_RS_10_PP_STOCK_2
            vehicles[348] = 2375627941
            --MAZ_RX7_RZ_98_PP_STOCK_1
            vehicles[349] = 1198552022
            --MAZ_RX7_RZ_98_PP_STOCK_2
            vehicles[350] = 1807438366
            --MAZ_RX7_RZ_98_PP_STOCK_3
            vehicles[351] = 1376730081
            --NIS_370_Z_09_PP_STOCK_1
            vehicles[352] = 3231208053
            --NIS_370_Z_09_PP_STOCK_2
            vehicles[353] = 2656445332
            --NIS_370_Z_09_PP_STOCK_3
            vehicles[354] = 3846449541
            --NIS_GTR_R35_08_PP_STOCK_1
            vehicles[355] = 1264558075
            --NIS_GTR_R35_08_PP_STOCK_2
            vehicles[356] = 1511061930
            --NIS_GTR_R35_08_PP_STOCK_3
            vehicles[357] = 360109402
            --NIS_GTR_STK_73_NFS_E
            vehicles[358] = 907975255
            --SUB_WRX_STI_09_NFS_E
            vehicles[359] = 3408409694
            --LAM_COU_QV_85_PP_STOCK_1
            vehicles[360] = 2031156362
            --LAM_COU_QV_85_PP_STOCK_2
            vehicles[361] = 2296894266
            --LAM_COU_QV_85_PP_STOCK_3
            vehicles[362] = 2397773668
            --LEX_LFA_STK_10_PP_STOCK_1
            vehicles[363] = 1242417971
            --LEX_LFA_STK_10_PP_STOCK_2
            vehicles[364] = 1501282514
            --LEX_LFA_STK_10_PP_STOCK_3
            vehicles[365] = 1766454385
            --LEX_LFA_STK_10_PP_STOCK_4
            vehicles[366] = 3974442167

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "The swap has completed successfully"
            end
        end
    end
end

lv = createTimer(nil)
timer_onTimer(lv,LasVegas)
timer_setInterval(lv, 100)
timer_setEnabled(lv, true)

[DISABLE]
timer_setEnabled(lv, false)
print "Las Vegas East Supercar Car Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>864</ID>
          <Description>"Chicago"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function my_random (t,from, to)
    local num = math.random (from, to)
    if t[num] then  num = my_random (t, from, to)  end
    t[num]=num
    return num
end

[ENABLE]
math.randomseed(os.time())
print "Chicago Downtown Supercar Car Select Randomizer timer enabled"
function Chicago()

    local vehicles = {}
    --AST_ONE_77_10_PP_STOCK_1
    vehicles[1] = 2351754525
    vehicles[2] = 1662806892
    vehicles[3] = 228872290
    vehicles[4] = 1964104069
    vehicles[5] = 2344597012
    vehicles[6] = 2132135922
    vehicles[7] = 1440933530
    vehicles[8] = 549781442
    --AST_ONE_77_10_PP1V1
    vehicles[9] = 613611658
    vehicles[10] = 813015225
    vehicles[11] = 3419515662
    vehicles[12] = 2461199550
    vehicles[13] = 1159870676
    vehicles[14] = 1797540164
    vehicles[15] = 2593782817
    vehicles[16] = 3779064502
    --AST_ONE_77_10_PP2V1
    vehicles[17] = 2815320120
    vehicles[18] = 1595550620
    vehicles[19] = 2739858695
    vehicles[20] = 3707827774
    vehicles[21] = 781260459
    vehicles[22] = 539917869
    vehicles[23] = 3665518132
    vehicles[24] = 334451358
    --AST_ONE_77_10_RIVAL_1
    vehicles[25] = 2723042599
    --POR_CAR_GT_08_PP_STOCK_1
    vehicles[26] = 2168567350
    vehicles[27] = 2814841447
    vehicles[28] = 2326235097
    vehicles[29] = 1070731952
    vehicles[30] = 1467600787
    vehicles[31] = 2519948613
    vehicles[32] = 2060072065
    vehicles[33] = 4281187630
    --POR_CAR_GT_08_PP1V1
    vehicles[34] = 583962154
    vehicles[35] = 678369750
    vehicles[36] = 2458568756
    vehicles[37] = 1728488156
    vehicles[38] = 152393893
    vehicles[39] = 4216707801
    vehicles[40] = 3701910843
    vehicles[41] = 1108161064
    --BUG_VEY_SS_10_PP_STOCK_1
    vehicles[42] = 1396925995
    vehicles[43] = 233386615
    vehicles[44] = 198885591
    vehicles[45] = 2508479814
    vehicles[46] = 38889236
    vehicles[47] = 2998207530
    vehicles[48] = 222257381
    vehicles[49] = 3456734173
    --BUG_VEY_SS_10_PP1V1
    vehicles[50] = 397414533
    vehicles[51] = 13600042
    vehicles[52] = 1173801304
    vehicles[53] = 2683073109
    vehicles[54] = 3414920866
    vehicles[55] = 4061025962
    vehicles[56] = 4269471868
    vehicles[57] = 1201919218
    --GUM_APO_S_11_PP_STOCK_1
    vehicles[58] = 4194888242
    vehicles[59] = 2929300545
    vehicles[60] = 3513026456
    vehicles[61] = 2656167781
    vehicles[62] = 1027466826
    vehicles[63] = 3035566623
    vehicles[64] = 2448020030
    vehicles[65] = 1169312998
    --GUM_APO_S_11_PP1V1
    vehicles[66] = 2604599393
    vehicles[67] = 1428535737
    vehicles[68] = 1269182954
    vehicles[69] = 3445163782
    vehicles[70] = 1267634863
    vehicles[71] = 1972342918
    vehicles[72] = 2708126175
    vehicles[73] = 2599136713
    --HEN_VEN_GT_11_PP_STOCK_1
    vehicles[74] = 1889692556
    vehicles[75] = 2875939421
    vehicles[76] = 1843403582
    vehicles[77] = 1559471646
    vehicles[78] = 1293973268
    vehicles[79] = 1435683144
    vehicles[80] = 2573564796
    vehicles[81] = 2334641747
    --HEN_VEN_GT_11_PP1V1
    vehicles[82] = 1532349533
    vehicles[83] = 1612734426
    vehicles[84] = 1350165957
    vehicles[85] = 3838522613
    vehicles[86] = 3126269201
    vehicles[87] = 2902535361
    vehicles[88] = 42442522
    vehicles[89] = 284782573
    --KOE_AGE_R_11_PP_STOCK_1
    vehicles[90] = 938384918
    vehicles[91] = 3882992039
    vehicles[92] = 1371105745
    vehicles[93] = 2626688083
    vehicles[94] = 1231578851
    vehicles[95] = 3884005823
    vehicles[96] = 789750505
    vehicles[97] = 4215073769
    --KOE_AGE_R_11_PP1V1
    vehicles[98] = 450562262
    vehicles[99] = 3174728285
    vehicles[100] = 3125779387
    vehicles[101] = 3260662067
    vehicles[102] = 132303528
    vehicles[103] = 3392822886
    vehicles[104] = 4175699004
    vehicles[105] = 1147481775
    --LAM_AVE_700_12_PP_STOCK_1
    vehicles[106] = 228156588
    vehicles[107] = 2629373704
    vehicles[108] = 3963234612
    vehicles[109] = 2534942175
    vehicles[110] = 1033287156
    vehicles[111] = 1605709038
    vehicles[112] = 1956113471
    vehicles[113] = 3262842592
    --LAM_AVE_700_12_PP1V1
    vehicles[114] = 1630069578
    vehicles[115] = 1893492524
    vehicles[116] = 2320472582
    vehicles[117] = 1033194420
    vehicles[118] = 3418403022
    vehicles[119] = 3911160656
    vehicles[120] = 2473793792
    vehicles[121] = 3114695091
    --LAM_AVE_700_12_PP2V1
    vehicles[122] = 871581221
    vehicles[123] = 2858063602
    vehicles[124] = 627541664
    vehicles[125] = 4249870811
    vehicles[126] = 2456766280
    vehicles[127] = 4269161378
    vehicles[128] = 1418212893
    vehicles[129] = 961451823
    --LAM_AVE_700_12_PP_RUN
    vehicles[130] = 2196261666
    --LAM_MUR_SV_10_PP_STOCK_1
    vehicles[131] = 423002076
    vehicles[132] = 1164602375
    vehicles[133] = 2599236784
    vehicles[134] = 3259253348
    vehicles[135] = 3853253796
    vehicles[136] = 2117850692
    vehicles[137] = 2619259567
    vehicles[138] = 3214136501
    --LAM_MUR_SV_10_PP1V1
    vehicles[139] = 3389491414
    vehicles[140] = 1968726675
    vehicles[141] = 2504059847
    vehicles[142] = 329725607
    vehicles[143] = 4238989743
    vehicles[144] = 4205372699
    vehicles[145] = 3488973739
    vehicles[146] = 1567464013
    --LAM_MUR_SV_10_PP2V1
    vehicles[147] = 3343835678
    vehicles[148] = 2061181417
    vehicles[149] = 2495288543
    vehicles[150] = 4073003222
    vehicles[151] = 2322578206
    vehicles[152] = 662600563
    vehicles[153] = 670388343
    vehicles[154] = 1597875720
    --LAM_MUR_SV_10_PP_RARE_1
    vehicles[155] = 2854099895
    --LAM_SES_ELE_11_PP_STOCK_1
    vehicles[156] = 3037763135
    --LAM_SES_ELE_11_PP1V1
    vehicles[157] = 663647969
    vehicles[158] = 2362038992
    vehicles[159] = 2043180730
    vehicles[160] = 904850386
    vehicles[161] = 1277500942
    vehicles[162] = 2615408399
    vehicles[163] = 1287448061
    vehicles[164] = 1758221874
    --LAM_SES_ELE_11_PP2V1
    vehicles[165] = 386899547
    vehicles[166] = 1627756866
    vehicles[167] = 3796640221
    vehicles[168] = 2910801194
    vehicles[169] = 4108800856
    vehicles[170] = 2672444790
    vehicles[171] = 2380859159
    vehicles[172] = 2431781612
    --LAM_SES_ELE_11_PP_RARE_1
    vehicles[173] = 1021146513
    --MCL_F1_STK_94_PP_STOCK_1
    vehicles[174] = 3082609147
    vehicles[175] = 1842326981
    vehicles[176] = 3597153073
    vehicles[177] = 2027198581
    vehicles[178] = 4061750909
    vehicles[179] = 3284152259
    vehicles[180] = 3971845986
    vehicles[181] = 2188451802
    --MCL_F1_STK_94_PP1V1
    vehicles[182] = 2188732611
    vehicles[183] = 8847892
    vehicles[184] = 2546659436
    vehicles[185] = 4201908254
    vehicles[186] = 3309128826
    vehicles[187] = 3763200407
    vehicles[188] = 734242523
    vehicles[189] = 4147231431
    --MCL_F1_STK_94_PP2V1
    vehicles[190] = 3451952857
    vehicles[191] = 2727696005
    vehicles[192] = 2569286113
    vehicles[193] = 179413785
    vehicles[194] = 2797745784
    vehicles[195] = 4269482447
    vehicles[196] = 1346627002
    vehicles[197] = 3904972435
    --MCL_MP4_12C_12_PP_STOCK_1
    vehicles[198] = 2658400503
    vehicles[199] = 4193773627
    vehicles[200] = 1619287845
    vehicles[201] = 939656905
    vehicles[202] = 2000101387
    vehicles[203] = 2985567767
    vehicles[204] = 1596404988
    vehicles[205] = 3225073129
    --MCL_MP4_12C_12_PP1V1
    vehicles[206] = 3131107123
    vehicles[207] = 4294611947
    vehicles[208] = 3922078657
    vehicles[209] = 1057106373
    vehicles[210] = 3144079377
    vehicles[211] = 3471408279
    vehicles[212] = 130378825
    vehicles[213] = 4082318510
    --MCL_MP4_12C_12_PP2V1
    vehicles[214] = 2541095939
    vehicles[215] = 91889143
    vehicles[216] = 1017936786
    vehicles[217] = 3013363001
    vehicles[218] = 1204401820
    vehicles[219] = 3568224351
    vehicles[220] = 702147282
    vehicles[221] = 1587206021
    --MCL_MP4_12C_12_PP_RARE_1
    vehicles[222] = 2166586403
    --MCL_MP4_12C_12_NFS_E
    vehicles[223] = 3784919988
    --PAG_HUA_STK_11_PP_STOCK_1
    vehicles[224] = 801824035
    vehicles[225] = 3644372353
    vehicles[226] = 1000995635
    vehicles[227] = 2301704731
    vehicles[228] = 1033940261
    vehicles[229] = 2259031478
    vehicles[230] = 1536272541
    vehicles[231] = 2571694936
    --PAG_HUA_STK_11_PP1V1
    vehicles[232] = 238433599
    vehicles[233] = 3388131117
    vehicles[234] = 270572032
    vehicles[235] = 429465421
    vehicles[236] = 1363587384
    vehicles[237] = 2904320215
    vehicles[238] = 533716564
    vehicles[239] = 1368115291
    --PAG_HUA_STK_11_PP2V1
    vehicles[240] = 1008774409
    vehicles[241] = 3263622175
    vehicles[242] = 911442981
    vehicles[243] = 1504752564
    vehicles[244] = 2112395282
    vehicles[245] = 3901405701
    vehicles[246] = 934423389
    vehicles[247] = 885036472
    --PAG_HUA_STK_11_PP_RARE_1
    vehicles[248] = 2149624056
    --PAG_HUA_STK_11_PP_RUN
    vehicles[249] = 671513072
    --PAG_ZON_CIN_10_PP_STOCK_1
    vehicles[250] = 3444720201
    vehicles[251] = 4205485260
    vehicles[252] = 869131265
    vehicles[253] = 590551761
    vehicles[254] = 300480834
    vehicles[255] = 1621994448
    vehicles[256] = 989985070
    vehicles[257] = 1285392907
    --PAG_ZON_CIN_10_PP1V1
    vehicles[258] = 749556118
    vehicles[259] = 2979651631
    vehicles[260] = 4244524106
    vehicles[261] = 2645559681
    vehicles[262] = 3775521792
    vehicles[263] = 3496677447
    vehicles[264] = 316886774
    vehicles[265] = 273045201
    --PAG_ZON_CIN_10_PP2V1
    vehicles[266] = 2030547104
    vehicles[267] = 265034312
    vehicles[268] = 268954836
    vehicles[269] = 1431801290
    vehicles[270] = 1746156725
    vehicles[271] = 2288285211
    vehicles[272] = 463794150
    vehicles[273] = 847907506
    --PAG_ZON_CIN_10_PP_RARE_1
    vehicles[274] = 1785461374
    --POR_918_RSR_11_PP_STOCK_1
    vehicles[275] = 3362615761
    vehicles[276] = 1491889756
    vehicles[277] = 74329220
    vehicles[278] = 2050041874
    vehicles[279] = 2035297976
    vehicles[280] = 2259933696
    vehicles[281] = 4020233018
    vehicles[282] = 2429649982
    --POR_918_RSR_11_PP1V1
    vehicles[283] = 3590803949
    vehicles[284] = 470621453
    vehicles[285] = 3564669780
    vehicles[286] = 358280095
    vehicles[287] = 3275213580
    vehicles[288] = 2051625406
    vehicles[289] = 1980565952
    vehicles[290] = 2585244432
    --POR_918_RSR_11_PP2V1
    vehicles[291] = 2455444527
    vehicles[292] = 1358334390
    vehicles[293] = 3150721719
    vehicles[294] = 2293722771
    vehicles[295] = 3732541420
    vehicles[296] = 2676860188
    vehicles[297] = 1188933131
    vehicles[298] = 994061469
    --POR_918_RSR_11_PP_RARE_1
    vehicles[299] = 2235038457
    --POR_918_RSR_11_PP_RUN
    vehicles[300] = 893260034
    --AUD_R8_V10_10_PP_RUN
    vehicles[301] = 1078212109
    --CHE_VET_CBN_10_PP_RARE_1
    vehicles[302] = 1289781367
    --CHE_VET_CBN_10_NFS_E
    vehicles[303] = 1732803059
    --MAZ_RX7_RZ_98_NFS_E
    vehicles[304] = 529645684
    --NIS_240_ZG_71_PP_RARE_1
    vehicles[305] = 4150176875
    --NIS_GTR_R32_91_PP_RARE_1
    vehicles[306] = 1279882972
    --NIS_GTR_STK_73_PP_RARE_1
    vehicles[307] = 1203603962
    --NIS_GTR_V_10_PP_RUN
    vehicles[308] = 501327745
    --POR_GT3_RS_10_PP_RARE_1
    vehicles[309] = 984573869
    --POR_GT3_RS_10_PP_RARE_2
    vehicles[310] = 996427356
    --VOL_GTI_MK1_76_PP_RARE_1
    vehicles[311] = 3720220186
    --BMW_M3_GTS_10_NFS_E
    vehicles[312] = 3979197479
    --SHE_DAY_COU_65_PP_RARE_1
    vehicles[313] = 4022012078
    --SUB_WRX_STI_09_PP_RARE_1
    vehicles[314] = 3590308002
    --FOR_MUS_BOS_12_PP_RARE_1
    vehicles[315] = 4214528836
    --BMW_1M_COU_11_PP_RARE_1
    vehicles[316] = 1682648577
    --AUD_R8_V10_10_NFS_E
    vehicles[317] = 3064452558
    --BMW_M3_E30_90_PP_RARE_1
    vehicles[318] = 2320421064
    --CHE_CAM_ZL1_13_PP_RARE_1
    vehicles[319] = 1983307871
    --CHE_EL_CAM_70_PP_RARE_1
    vehicles[320] = 960019312
    --CHE_CAM_SS_67_PP_RARE_1
    vehicles[321] = 313312439
    --CHE_VET_CBN_10_PP_RUN
    vehicles[322] = 1143930682
    --FOR_FOC_RS_10_PP_RARE_1
    vehicles[323] = 699181181
    --FOR_GT_STK_06_NFS_E
    vehicles[324] = 1588264861
    --FOR_GT_STK_06_PP_RARE_1
    vehicles[325] = 1444633056
    --LAM_GAL_VB_10_NFS_E
    vehicles[326] = 3115752732
    --LOT_EVO_STK_10_PP_RARE_1
    vehicles[327] = 1821494394
    --LOT_EXI_260_10_PP_RARE_1
    vehicles[328] = 30590049
    --MAZ_RX7_RZ_98_PP_RARE_1
    vehicles[329] = 2688135082
    --MER_SLS_AMG_10_NFS_E
    vehicles[330] = 918776313
    --MER_SLS_AMG_10_PP_RARE_1
    vehicles[331] = 3990075021
    --MER_SLS_AMG_10_RIVAL
    vehicles[332] = 3367604003
    --NIS_S14_A_97_PP_RARE_1
    vehicles[333] = 1409617150
    --NIS_370_Z_09_PP_RARE_1
    vehicles[334] = 794975903
    --NIS_GTR_V_10_NFS_E
    vehicles[335] = 2056341605
    --NIS_GTR_V_10_PP_RARE_1
    vehicles[336] = 528049014
    --PON_FIR_STK_78_PP_RARE_1
    vehicles[337] = 3044389769
    --POR_991_S_12_PP_RARE_1
    vehicles[338] = 3279588277
    --REN_MEG_RS_10_PP_RARE_1
    vehicles[339] = 1861624512
    --SHE_DAY_COU_65_NFS_E
    vehicles[340] = 1095199585
    --TOY_SUP_STK_98_MARKETING_1
    vehicles[341] = 1222984308

    --CUSTOM MADE BY _mRally2
    --POR_991_S_12_PP_RUN
    vehicles[342] = 2276214493
    --NIS_240_ZG_71_NFS_E
    vehicles[343] = 3251408801
    --FOR_FOC_RS_10_NFS_E
    vehicles[344] = 224517341
    --TOY_SUP_STK_98_NFS_E
    vehicles[345] = 155202617
    --NIS_GTR_R32_91_PRESALE_1
    vehicles[346] = 1851197596
    --POR_GT3_RS_10_PP_STOCK_1
    vehicles[347] = 3662254698
    --POR_GT3_RS_10_PP_STOCK_2
    vehicles[348] = 2375627941
    --MAZ_RX7_RZ_98_PP_STOCK_1
    vehicles[349] = 1198552022
    --MAZ_RX7_RZ_98_PP_STOCK_2
    vehicles[350] = 1807438366
    --MAZ_RX7_RZ_98_PP_STOCK_3
    vehicles[351] = 1376730081
    --NIS_370_Z_09_PP_STOCK_1
    vehicles[352] = 3231208053
    --NIS_370_Z_09_PP_STOCK_2
    vehicles[353] = 2656445332
    --NIS_370_Z_09_PP_STOCK_3
    vehicles[354] = 3846449541
    --NIS_GTR_R35_08_PP_STOCK_1
    vehicles[355] = 1264558075
    --NIS_GTR_R35_08_PP_STOCK_2
    vehicles[356] = 1511061930
    --NIS_GTR_R35_08_PP_STOCK_3
    vehicles[357] = 360109402
    --NIS_GTR_STK_73_NFS_E
    vehicles[358] = 907975255
    --SUB_WRX_STI_09_NFS_E
    vehicles[359] = 3408409694
    --LAM_COU_QV_85_PP_STOCK_1
    vehicles[360] = 2031156362
    --LAM_COU_QV_85_PP_STOCK_2
    vehicles[361] = 2296894266
    --LAM_COU_QV_85_PP_STOCK_3
    vehicles[362] = 2397773668
    --LEX_LFA_STK_10_PP_STOCK_1
    vehicles[363] = 1242417971
    --LEX_LFA_STK_10_PP_STOCK_2
    vehicles[364] = 1501282514
    --LEX_LFA_STK_10_PP_STOCK_3
    vehicles[365] = 1766454385
    --LEX_LFA_STK_10_PP_STOCK_4
    vehicles[366] = 3974442167

    local ptr_1 = false
    local ptr_2 = false
    local ptr_3 = false
    local ptr_4 = false
    local ptr_5 = false
    local ptr_6 = false

    local jump = false

    local lastCarClassID = 0
    local lastCarID = 0

    if readPointer("[[[00CB40D4]+6C]+110]+0") ~= nil and readInteger("[[[00CB40D4]+6C]+110]+0") == 2580303702 and jump == false then
        ptr_1 = true
        jump = true
    elseif readPointer("[[[019FA888]+0]+A0]+0") ~= nil and readInteger("[[[019FA888]+0]+A0]+0") == 2580303702 and jump == false then
        ptr_2 = true
        jump = true
    elseif readPointer("[[[[00CB40D4]+3C]+180]+250]+0") ~= nil and readInteger("[[[[00CB40D4]+3C]+180]+250]+0") == 2580303702 and jump == false then
        ptr_3 = true
        jump = true
    elseif readPointer("[[[[00CB40D4]+38]+1F0]+250]+0") ~= nil and readInteger("[[[[00CB40D4]+38]+1F0]+250]+0") == 2580303702 and jump == false then
        ptr_4 = true
        jump = true
    elseif readPointer("[[[[[00CB40D4]+84]+B9C]+90]+250]+0") ~= nil and readInteger("[[[[[00CB40D4]+84]+B9C]+90]+250]+0") == 2580303702 and jump == false then
        ptr_5 = true
        jump = true
    elseif readPointer("[[[[[019FA888]+C]+BBC]+90]+250]+0") ~= nil and readInteger("[[[[[019FA888]+C]+BBC]+90]+250]+0") == 2580303702 and jump == false then
        ptr_6 = true
        jump = true
    end

    if jump == true then
        if ptr_1 == true then
            lastCarClassID = getAddress("[[[00CB40D4]+6C]+110]+0")
        elseif ptr_2 == true then
            lastCarClassID = getAddress("[[[019FA888]+0]+A0]+0")
        elseif ptr_3 == true then
            lastCarClassID = getAddress("[[[[00CB40D4]+3C]+180]+250]+0")
        elseif ptr_4 == true then
            lastCarClassID = getAddress("[[[[00CB40D4]+38]+1F0]+250]+0")
        elseif ptr_5 == true then
            lastCarClassID = getAddress("[[[[[00CB40D4]+84]+B9C]+90]+250]+0")
        elseif ptr_6 == true then
            lastCarClassID = getAddress("[[[[[019FA888]+C]+BBC]+90]+250]+0")
        end

        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 then
            lastCarID = lastCarClassID + 0x4
            if readInteger(lastCarID) == 470076578 then
                first = lastCarClassID + 0x4
                second = lastCarClassID + 0xC
                third = lastCarClassID + 0x14

                local array = {}
                local t = {}
                for i =1, 3 do
                    X = my_random (t, 1, 366)
                    array[i] = X
                end

                writeInteger(first,vehicles[array[1]])
                writeInteger(second,vehicles[array[2]])
                writeInteger(third,vehicles[array[3]])

                if readInteger(first) == vehicles[array[1]] and
                    readInteger(second) == vehicles[array[2]] and
                    readInteger(third) == vehicles[array[3]] then
                    print "The swap has completed successfully"
                end
            end
        end
    end
end

cc = createTimer(nil)
timer_onTimer(cc,Chicago)
timer_setInterval(cc, 100)
timer_setEnabled(cc, true)

[DISABLE]
timer_setEnabled(cc, false)
print "Chicago Downtown Supercar Car Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>865</ID>
          <Description>"Uri"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
math.randomseed(os.time())
print "Uri Garage Supercar Car Select Randomizer timer enabled"
function Uri()
    if readPointer("[[[[[027147B0]+7A4]+24]+8]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[[027147B0]+7A4]+24]+8]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3362615761 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 366)
                array[i] = X
            end
            local vehicles = {}
            --AST_ONE_77_10_PP_STOCK_1
            vehicles[1] = 2351754525
            vehicles[2] = 1662806892
            vehicles[3] = 228872290
            vehicles[4] = 1964104069
            vehicles[5] = 2344597012
            vehicles[6] = 2132135922
            vehicles[7] = 1440933530
            vehicles[8] = 549781442
            --AST_ONE_77_10_PP1V1
            vehicles[9] = 613611658
            vehicles[10] = 813015225
            vehicles[11] = 3419515662
            vehicles[12] = 2461199550
            vehicles[13] = 1159870676
            vehicles[14] = 1797540164
            vehicles[15] = 2593782817
            vehicles[16] = 3779064502
            --AST_ONE_77_10_PP2V1
            vehicles[17] = 2815320120
            vehicles[18] = 1595550620
            vehicles[19] = 2739858695
            vehicles[20] = 3707827774
            vehicles[21] = 781260459
            vehicles[22] = 539917869
            vehicles[23] = 3665518132
            vehicles[24] = 334451358
            --AST_ONE_77_10_RIVAL_1
            vehicles[25] = 2723042599
            --POR_CAR_GT_08_PP_STOCK_1
            vehicles[26] = 2168567350
            vehicles[27] = 2814841447
            vehicles[28] = 2326235097
            vehicles[29] = 1070731952
            vehicles[30] = 1467600787
            vehicles[31] = 2519948613
            vehicles[32] = 2060072065
            vehicles[33] = 4281187630
            --POR_CAR_GT_08_PP1V1
            vehicles[34] = 583962154
            vehicles[35] = 678369750
            vehicles[36] = 2458568756
            vehicles[37] = 1728488156
            vehicles[38] = 152393893
            vehicles[39] = 4216707801
            vehicles[40] = 3701910843
            vehicles[41] = 1108161064
            --BUG_VEY_SS_10_PP_STOCK_1
            vehicles[42] = 1396925995
            vehicles[43] = 233386615
            vehicles[44] = 198885591
            vehicles[45] = 2508479814
            vehicles[46] = 38889236
            vehicles[47] = 2998207530
            vehicles[48] = 222257381
            vehicles[49] = 3456734173
            --BUG_VEY_SS_10_PP1V1
            vehicles[50] = 397414533
            vehicles[51] = 13600042
            vehicles[52] = 1173801304
            vehicles[53] = 2683073109
            vehicles[54] = 3414920866
            vehicles[55] = 4061025962
            vehicles[56] = 4269471868
            vehicles[57] = 1201919218
            --GUM_APO_S_11_PP_STOCK_1
            vehicles[58] = 4194888242
            vehicles[59] = 2929300545
            vehicles[60] = 3513026456
            vehicles[61] = 2656167781
            vehicles[62] = 1027466826
            vehicles[63] = 3035566623
            vehicles[64] = 2448020030
            vehicles[65] = 1169312998
            --GUM_APO_S_11_PP1V1
            vehicles[66] = 2604599393
            vehicles[67] = 1428535737
            vehicles[68] = 1269182954
            vehicles[69] = 3445163782
            vehicles[70] = 1267634863
            vehicles[71] = 1972342918
            vehicles[72] = 2708126175
            vehicles[73] = 2599136713
            --HEN_VEN_GT_11_PP_STOCK_1
            vehicles[74] = 1889692556
            vehicles[75] = 2875939421
            vehicles[76] = 1843403582
            vehicles[77] = 1559471646
            vehicles[78] = 1293973268
            vehicles[79] = 1435683144
            vehicles[80] = 2573564796
            vehicles[81] = 2334641747
            --HEN_VEN_GT_11_PP1V1
            vehicles[82] = 1532349533
            vehicles[83] = 1612734426
            vehicles[84] = 1350165957
            vehicles[85] = 3838522613
            vehicles[86] = 3126269201
            vehicles[87] = 2902535361
            vehicles[88] = 42442522
            vehicles[89] = 284782573
            --KOE_AGE_R_11_PP_STOCK_1
            vehicles[90] = 938384918
            vehicles[91] = 3882992039
            vehicles[92] = 1371105745
            vehicles[93] = 2626688083
            vehicles[94] = 1231578851
            vehicles[95] = 3884005823
            vehicles[96] = 789750505
            vehicles[97] = 4215073769
            --KOE_AGE_R_11_PP1V1
            vehicles[98] = 450562262
            vehicles[99] = 3174728285
            vehicles[100] = 3125779387
            vehicles[101] = 3260662067
            vehicles[102] = 132303528
            vehicles[103] = 3392822886
            vehicles[104] = 4175699004
            vehicles[105] = 1147481775
            --LAM_AVE_700_12_PP_STOCK_1
            vehicles[106] = 228156588
            vehicles[107] = 2629373704
            vehicles[108] = 3963234612
            vehicles[109] = 2534942175
            vehicles[110] = 1033287156
            vehicles[111] = 1605709038
            vehicles[112] = 1956113471
            vehicles[113] = 3262842592
            --LAM_AVE_700_12_PP1V1
            vehicles[114] = 1630069578
            vehicles[115] = 1893492524
            vehicles[116] = 2320472582
            vehicles[117] = 1033194420
            vehicles[118] = 3418403022
            vehicles[119] = 3911160656
            vehicles[120] = 2473793792
            vehicles[121] = 3114695091
            --LAM_AVE_700_12_PP2V1
            vehicles[122] = 871581221
            vehicles[123] = 2858063602
            vehicles[124] = 627541664
            vehicles[125] = 4249870811
            vehicles[126] = 2456766280
            vehicles[127] = 4269161378
            vehicles[128] = 1418212893
            vehicles[129] = 961451823
            --LAM_AVE_700_12_PP_RUN
            vehicles[130] = 2196261666
            --LAM_MUR_SV_10_PP_STOCK_1
            vehicles[131] = 423002076
            vehicles[132] = 1164602375
            vehicles[133] = 2599236784
            vehicles[134] = 3259253348
            vehicles[135] = 3853253796
            vehicles[136] = 2117850692
            vehicles[137] = 2619259567
            vehicles[138] = 3214136501
            --LAM_MUR_SV_10_PP1V1
            vehicles[139] = 3389491414
            vehicles[140] = 1968726675
            vehicles[141] = 2504059847
            vehicles[142] = 329725607
            vehicles[143] = 4238989743
            vehicles[144] = 4205372699
            vehicles[145] = 3488973739
            vehicles[146] = 1567464013
            --LAM_MUR_SV_10_PP2V1
            vehicles[147] = 3343835678
            vehicles[148] = 2061181417
            vehicles[149] = 2495288543
            vehicles[150] = 4073003222
            vehicles[151] = 2322578206
            vehicles[152] = 662600563
            vehicles[153] = 670388343
            vehicles[154] = 1597875720
            --LAM_MUR_SV_10_PP_RARE_1
            vehicles[155] = 2854099895
            --LAM_SES_ELE_11_PP_STOCK_1
            vehicles[156] = 3037763135
            --LAM_SES_ELE_11_PP1V1
            vehicles[157] = 663647969
            vehicles[158] = 2362038992
            vehicles[159] = 2043180730
            vehicles[160] = 904850386
            vehicles[161] = 1277500942
            vehicles[162] = 2615408399
            vehicles[163] = 1287448061
            vehicles[164] = 1758221874
            --LAM_SES_ELE_11_PP2V1
            vehicles[165] = 386899547
            vehicles[166] = 1627756866
            vehicles[167] = 3796640221
            vehicles[168] = 2910801194
            vehicles[169] = 4108800856
            vehicles[170] = 2672444790
            vehicles[171] = 2380859159
            vehicles[172] = 2431781612
            --LAM_SES_ELE_11_PP_RARE_1
            vehicles[173] = 1021146513
            --MCL_F1_STK_94_PP_STOCK_1
            vehicles[174] = 3082609147
            vehicles[175] = 1842326981
            vehicles[176] = 3597153073
            vehicles[177] = 2027198581
            vehicles[178] = 4061750909
            vehicles[179] = 3284152259
            vehicles[180] = 3971845986
            vehicles[181] = 2188451802
            --MCL_F1_STK_94_PP1V1
            vehicles[182] = 2188732611
            vehicles[183] = 8847892
            vehicles[184] = 2546659436
            vehicles[185] = 4201908254
            vehicles[186] = 3309128826
            vehicles[187] = 3763200407
            vehicles[188] = 734242523
            vehicles[189] = 4147231431
            --MCL_F1_STK_94_PP2V1
            vehicles[190] = 3451952857
            vehicles[191] = 2727696005
            vehicles[192] = 2569286113
            vehicles[193] = 179413785
            vehicles[194] = 2797745784
            vehicles[195] = 4269482447
            vehicles[196] = 1346627002
            vehicles[197] = 3904972435
            --MCL_MP4_12C_12_PP_STOCK_1
            vehicles[198] = 2658400503
            vehicles[199] = 4193773627
            vehicles[200] = 1619287845
            vehicles[201] = 939656905
            vehicles[202] = 2000101387
            vehicles[203] = 2985567767
            vehicles[204] = 1596404988
            vehicles[205] = 3225073129
            --MCL_MP4_12C_12_PP1V1
            vehicles[206] = 3131107123
            vehicles[207] = 4294611947
            vehicles[208] = 3922078657
            vehicles[209] = 1057106373
            vehicles[210] = 3144079377
            vehicles[211] = 3471408279
            vehicles[212] = 130378825
            vehicles[213] = 4082318510
            --MCL_MP4_12C_12_PP2V1
            vehicles[214] = 2541095939
            vehicles[215] = 91889143
            vehicles[216] = 1017936786
            vehicles[217] = 3013363001
            vehicles[218] = 1204401820
            vehicles[219] = 3568224351
            vehicles[220] = 702147282
            vehicles[221] = 1587206021
            --MCL_MP4_12C_12_PP_RARE_1
            vehicles[222] = 2166586403
            --MCL_MP4_12C_12_NFS_E
            vehicles[223] = 3784919988
            --PAG_HUA_STK_11_PP_STOCK_1
            vehicles[224] = 801824035
            vehicles[225] = 3644372353
            vehicles[226] = 1000995635
            vehicles[227] = 2301704731
            vehicles[228] = 1033940261
            vehicles[229] = 2259031478
            vehicles[230] = 1536272541
            vehicles[231] = 2571694936
            --PAG_HUA_STK_11_PP1V1
            vehicles[232] = 238433599
            vehicles[233] = 3388131117
            vehicles[234] = 270572032
            vehicles[235] = 429465421
            vehicles[236] = 1363587384
            vehicles[237] = 2904320215
            vehicles[238] = 533716564
            vehicles[239] = 1368115291
            --PAG_HUA_STK_11_PP2V1
            vehicles[240] = 1008774409
            vehicles[241] = 3263622175
            vehicles[242] = 911442981
            vehicles[243] = 1504752564
            vehicles[244] = 2112395282
            vehicles[245] = 3901405701
            vehicles[246] = 934423389
            vehicles[247] = 885036472
            --PAG_HUA_STK_11_PP_RARE_1
            vehicles[248] = 2149624056
            --PAG_HUA_STK_11_PP_RUN
            vehicles[249] = 671513072
            --PAG_ZON_CIN_10_PP_STOCK_1
            vehicles[250] = 3444720201
            vehicles[251] = 4205485260
            vehicles[252] = 869131265
            vehicles[253] = 590551761
            vehicles[254] = 300480834
            vehicles[255] = 1621994448
            vehicles[256] = 989985070
            vehicles[257] = 1285392907
            --PAG_ZON_CIN_10_PP1V1
            vehicles[258] = 749556118
            vehicles[259] = 2979651631
            vehicles[260] = 4244524106
            vehicles[261] = 2645559681
            vehicles[262] = 3775521792
            vehicles[263] = 3496677447
            vehicles[264] = 316886774
            vehicles[265] = 273045201
            --PAG_ZON_CIN_10_PP2V1
            vehicles[266] = 2030547104
            vehicles[267] = 265034312
            vehicles[268] = 268954836
            vehicles[269] = 1431801290
            vehicles[270] = 1746156725
            vehicles[271] = 2288285211
            vehicles[272] = 463794150
            vehicles[273] = 847907506
            --PAG_ZON_CIN_10_PP_RARE_1
            vehicles[274] = 1785461374
            --POR_918_RSR_11_PP_STOCK_1
            vehicles[275] = 3362615761
            vehicles[276] = 1491889756
            vehicles[277] = 74329220
            vehicles[278] = 2050041874
            vehicles[279] = 2035297976
            vehicles[280] = 2259933696
            vehicles[281] = 4020233018
            vehicles[282] = 2429649982
            --POR_918_RSR_11_PP1V1
            vehicles[283] = 3590803949
            vehicles[284] = 470621453
            vehicles[285] = 3564669780
            vehicles[286] = 358280095
            vehicles[287] = 3275213580
            vehicles[288] = 2051625406
            vehicles[289] = 1980565952
            vehicles[290] = 2585244432
            --POR_918_RSR_11_PP2V1
            vehicles[291] = 2455444527
            vehicles[292] = 1358334390
            vehicles[293] = 3150721719
            vehicles[294] = 2293722771
            vehicles[295] = 3732541420
            vehicles[296] = 2676860188
            vehicles[297] = 1188933131
            vehicles[298] = 994061469
            --POR_918_RSR_11_PP_RARE_1
            vehicles[299] = 2235038457
            --POR_918_RSR_11_PP_RUN
            vehicles[300] = 893260034
            --AUD_R8_V10_10_PP_RUN
            vehicles[301] = 1078212109
            --CHE_VET_CBN_10_PP_RARE_1
            vehicles[302] = 1289781367
            --CHE_VET_CBN_10_NFS_E
            vehicles[303] = 1732803059
            --MAZ_RX7_RZ_98_NFS_E
            vehicles[304] = 529645684
            --NIS_240_ZG_71_PP_RARE_1
            vehicles[305] = 4150176875
            --NIS_GTR_R32_91_PP_RARE_1
            vehicles[306] = 1279882972
            --NIS_GTR_STK_73_PP_RARE_1
            vehicles[307] = 1203603962
            --NIS_GTR_V_10_PP_RUN
            vehicles[308] = 501327745
            --POR_GT3_RS_10_PP_RARE_1
            vehicles[309] = 984573869
            --POR_GT3_RS_10_PP_RARE_2
            vehicles[310] = 996427356
            --VOL_GTI_MK1_76_PP_RARE_1
            vehicles[311] = 3720220186
            --BMW_M3_GTS_10_NFS_E
            vehicles[312] = 3979197479
            --SHE_DAY_COU_65_PP_RARE_1
            vehicles[313] = 4022012078
            --SUB_WRX_STI_09_PP_RARE_1
            vehicles[314] = 3590308002
            --FOR_MUS_BOS_12_PP_RARE_1
            vehicles[315] = 4214528836
            --BMW_1M_COU_11_PP_RARE_1
            vehicles[316] = 1682648577
            --AUD_R8_V10_10_NFS_E
            vehicles[317] = 3064452558
            --BMW_M3_E30_90_PP_RARE_1
            vehicles[318] = 2320421064
            --CHE_CAM_ZL1_13_PP_RARE_1
            vehicles[319] = 1983307871
            --CHE_EL_CAM_70_PP_RARE_1
            vehicles[320] = 960019312
            --CHE_CAM_SS_67_PP_RARE_1
            vehicles[321] = 313312439
            --CHE_VET_CBN_10_PP_RUN
            vehicles[322] = 1143930682
            --FOR_FOC_RS_10_PP_RARE_1
            vehicles[323] = 699181181
            --FOR_GT_STK_06_NFS_E
            vehicles[324] = 1588264861
            --FOR_GT_STK_06_PP_RARE_1
            vehicles[325] = 1444633056
            --LAM_GAL_VB_10_NFS_E
            vehicles[326] = 3115752732
            --LOT_EVO_STK_10_PP_RARE_1
            vehicles[327] = 1821494394
            --LOT_EXI_260_10_PP_RARE_1
            vehicles[328] = 30590049
            --MAZ_RX7_RZ_98_PP_RARE_1
            vehicles[329] = 2688135082
            --MER_SLS_AMG_10_NFS_E
            vehicles[330] = 918776313
            --MER_SLS_AMG_10_PP_RARE_1
            vehicles[331] = 3990075021
            --MER_SLS_AMG_10_RIVAL
            vehicles[332] = 3367604003
            --NIS_S14_A_97_PP_RARE_1
            vehicles[333] = 1409617150
            --NIS_370_Z_09_PP_RARE_1
            vehicles[334] = 794975903
            --NIS_GTR_V_10_NFS_E
            vehicles[335] = 2056341605
            --NIS_GTR_V_10_PP_RARE_1
            vehicles[336] = 528049014
            --PON_FIR_STK_78_PP_RARE_1
            vehicles[337] = 3044389769
            --POR_991_S_12_PP_RARE_1
            vehicles[338] = 3279588277
            --REN_MEG_RS_10_PP_RARE_1
            vehicles[339] = 1861624512
            --SHE_DAY_COU_65_NFS_E
            vehicles[340] = 1095199585
            --TOY_SUP_STK_98_MARKETING_1
            vehicles[341] = 1222984308

            --CUSTOM MADE BY _mRally2
            --POR_991_S_12_PP_RUN
            vehicles[342] = 2276214493
            --NIS_240_ZG_71_NFS_E
            vehicles[343] = 3251408801
            --FOR_FOC_RS_10_NFS_E
            vehicles[344] = 224517341
            --TOY_SUP_STK_98_NFS_E
            vehicles[345] = 155202617
            --NIS_GTR_R32_91_PRESALE_1
            vehicles[346] = 1851197596
            --POR_GT3_RS_10_PP_STOCK_1
            vehicles[347] = 3662254698
            --POR_GT3_RS_10_PP_STOCK_2
            vehicles[348] = 2375627941
            --MAZ_RX7_RZ_98_PP_STOCK_1
            vehicles[349] = 1198552022
            --MAZ_RX7_RZ_98_PP_STOCK_2
            vehicles[350] = 1807438366
            --MAZ_RX7_RZ_98_PP_STOCK_3
            vehicles[351] = 1376730081
            --NIS_370_Z_09_PP_STOCK_1
            vehicles[352] = 3231208053
            --NIS_370_Z_09_PP_STOCK_2
            vehicles[353] = 2656445332
            --NIS_370_Z_09_PP_STOCK_3
            vehicles[354] = 3846449541
            --NIS_GTR_R35_08_PP_STOCK_1
            vehicles[355] = 1264558075
            --NIS_GTR_R35_08_PP_STOCK_2
            vehicles[356] = 1511061930
            --NIS_GTR_R35_08_PP_STOCK_3
            vehicles[357] = 360109402
            --NIS_GTR_STK_73_NFS_E
            vehicles[358] = 907975255
            --SUB_WRX_STI_09_NFS_E
            vehicles[359] = 3408409694
            --LAM_COU_QV_85_PP_STOCK_1
            vehicles[360] = 2031156362
            --LAM_COU_QV_85_PP_STOCK_2
            vehicles[361] = 2296894266
            --LAM_COU_QV_85_PP_STOCK_3
            vehicles[362] = 2397773668
            --LEX_LFA_STK_10_PP_STOCK_1
            vehicles[363] = 1242417971
            --LEX_LFA_STK_10_PP_STOCK_2
            vehicles[364] = 1501282514
            --LEX_LFA_STK_10_PP_STOCK_3
            vehicles[365] = 1766454385
            --LEX_LFA_STK_10_PP_STOCK_4
            vehicles[366] = 3974442167

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "The swap has completed successfully"
            end
        end
    end
end

ur = createTimer(nil)
timer_onTimer(ur,Uri)
timer_setInterval(ur, 100)
timer_setEnabled(ur, true)

[DISABLE]
timer_setEnabled(ur, false)
print "Uri Garage Supercar Car Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>861</ID>
          <Description>"Gas Stations"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
[ENABLE]
math.randomseed(os.time())
print "Gas Stations timer enabled"
function GasStation()
    if readPointer("[[[[[02882500]+64]+1A8]+18]+1D8]+0") ~= nil then
        local firstCarArray = getAddress("[[[[[02882500]+64]+1A8]+18]+1D8]+0")

        --T4 Gas Stations: 47 Vehicles Available
        --T5 Gas Stations: 43 Vehicles Available
        --Any Gas Stations: 167 Vehicles Available

        --AST_ONE_77_10_PP_STOCK_1
        writeInteger(firstCarArray,2351754525)
        --AST_ONE_77_10_RIVAL_1
        writeInteger(firstCarArray+0x4,2723042599)
        --POR_CAR_GT_08_PP_STOCK_1
        writeInteger(firstCarArray+0x8,2168567350)
        --BUG_VEY_SS_10_PP_STOCK_1
        writeInteger(firstCarArray+0xC,1396925995)
        --GUM_APO_S_11_PP_STOCK_1
        writeInteger(firstCarArray+0x10,4194888242)
        --HEN_VEN_GT_11_PP_STOCK_1
        writeInteger(firstCarArray+0x14,1889692556)
        --KOE_AGE_R_11_PP_STOCK_1
        writeInteger(firstCarArray+0x18,938384918)
        --LAM_AVE_700_12_PP_STOCK_1
        writeInteger(firstCarArray+0x1C,228156588)
        --LAM_AVE_700_12_PP_RUN
        writeInteger(firstCarArray+0x20,2196261666)
        --LAM_MUR_SV_10_PP_STOCK_1
        writeInteger(firstCarArray+0x24,423002076)
        --LAM_MUR_SV_10_PP_RARE_1
        writeInteger(firstCarArray+0x28,2854099895)
        --LAM_SES_ELE_11_PP_STOCK_1
        writeInteger(firstCarArray+0x2C,3037763135)
        --LAM_SES_ELE_11_PP_RARE_1
        writeInteger(firstCarArray+0x30,1021146513)
        --MCL_F1_STK_94_PP_STOCK_1
        writeInteger(firstCarArray+0x34,3082609147)
        --MCL_MP4_12C_12_PP_STOCK_1
        writeInteger(firstCarArray+0x38,2658400503)
        --MCL_MP4_12C_12_PP_RARE_1
        writeInteger(firstCarArray+0x3C,2166586403)
        --MCL_MP4_12C_12_NFS_E
        writeInteger(firstCarArray+0x40,3784919988)
        --PAG_HUA_STK_11_PP_STOCK_1
        writeInteger(firstCarArray+0x44,801824035)
        --PAG_HUA_STK_11_PP_RARE_1
        writeInteger(firstCarArray+0x48,2149624056)
        --PAG_HUA_STK_11_PP_RUN
        writeInteger(firstCarArray+0x4C,671513072)
        --PAG_ZON_CIN_10_PP_STOCK_1
        writeInteger(firstCarArray+0x50,3444720201)
        --PAG_ZON_CIN_10_PP_RARE_1
        writeInteger(firstCarArray+0x54,1785461374)
        --POR_918_RSR_11_PP_STOCK_1
        writeInteger(firstCarArray+0x58,3362615761)
        --POR_918_RSR_11_PP_RARE_1
        writeInteger(firstCarArray+0x5C,2235038457)
        --POR_918_RSR_11_PP_RUN
        writeInteger(firstCarArray+0x60,893260034)
        --AUD_R8_V10_10_PP_RUN
        writeInteger(firstCarArray+0x64,1078212109)
        --CHE_VET_CBN_10_PP_RARE_1
        writeInteger(firstCarArray+0x68,1289781367)
        --CHE_VET_CBN_10_NFS_E
        writeInteger(firstCarArray+0x6C,1732803059)
        --MAZ_RX7_RZ_98_NFS_E
        writeInteger(firstCarArray+0x70,529645684)
        --NIS_240_ZG_71_PP_RARE_1
        writeInteger(firstCarArray+0x74,4150176875)
        --NIS_GTR_R32_91_PP_RARE_1
        writeInteger(firstCarArray+0x78,1279882972)
        --NIS_GTR_STK_73_PP_RARE_1
        writeInteger(firstCarArray+0x7C,1203603962)
        --NIS_GTR_V_10_PP_RUN
        writeInteger(firstCarArray+0x80,501327745)
        --POR_GT3_RS_10_PP_RARE_1
        writeInteger(firstCarArray+0x84,984573869)
        --POR_GT3_RS_10_PP_RARE_2
        writeInteger(firstCarArray+0x88,996427356)
        --VOL_GTI_MK1_76_PP_RARE_1
        writeInteger(firstCarArray+0x8C,3720220186)
        --BMW_M3_GTS_10_NFS_E
        writeInteger(firstCarArray+0x90,3979197479)
        --SHE_DAY_COU_65_PP_RARE_1
        writeInteger(firstCarArray+0x94,4022012078)
        --SUB_WRX_STI_09_PP_RARE_1
        writeInteger(firstCarArray+0x98,3590308002)
        --FOR_MUS_BOS_12_PP_RARE_1
        writeInteger(firstCarArray+0x9C,4214528836)
        --BMW_1M_COU_11_PP_RARE_1
        writeInteger(firstCarArray+0xA0,1682648577)
        --AUD_R8_V10_10_NFS_E
        writeInteger(firstCarArray+0xA4,3064452558)
        --BMW_M3_E30_90_PP_RARE_1
        writeInteger(firstCarArray+0xA8,2320421064)
        --CHE_CAM_ZL1_13_PP_RARE_1
        writeInteger(firstCarArray+0xAC,1983307871)
        --CHE_EL_CAM_70_PP_RARE_1
        writeInteger(firstCarArray+0xB0,960019312)
        --CHE_CAM_SS_67_PP_RARE_1
        writeInteger(firstCarArray+0xB4,313312439)
        --CHE_VET_CBN_10_PP_RUN
        writeInteger(firstCarArray+0xB8,1143930682)
        --FOR_FOC_RS_10_PP_RARE_1
        writeInteger(firstCarArray+0xBC,699181181)
        --FOR_GT_STK_06_NFS_E
        writeInteger(firstCarArray+0xC0,1588264861)
        --FOR_GT_STK_06_PP_RARE_1
        writeInteger(firstCarArray+0xC4,1444633056)
        --LAM_GAL_VB_10_NFS_E
        writeInteger(firstCarArray+0xC8,3115752732)
        --LOT_EVO_STK_10_PP_RARE_1
        writeInteger(firstCarArray+0xCC,1821494394)
        --LOT_EXI_260_10_PP_RARE_1
        writeInteger(firstCarArray+0xD0,30590049)
        --MAZ_RX7_RZ_98_PP_RARE_1
        writeInteger(firstCarArray+0xD4,2688135082)
        --MER_SLS_AMG_10_NFS_E
        writeInteger(firstCarArray+0xD8,918776313)
        --MER_SLS_AMG_10_PP_RARE_1
        writeInteger(firstCarArray+0xDC,3990075021)
        --MER_SLS_AMG_10_RIVAL
        writeInteger(firstCarArray+0xE0,3367604003)
        --NIS_S14_A_97_PP_RARE_1
        writeInteger(firstCarArray+0xE4,1409617150)
        --NIS_370_Z_09_PP_RARE_1
        writeInteger(firstCarArray+0xE8,794975903)
        --NIS_GTR_V_10_NFS_E
        writeInteger(firstCarArray+0xEC,2056341605)
        --NIS_GTR_V_10_PP_RARE_1
        writeInteger(firstCarArray+0xF0,528049014)
        --PON_FIR_STK_78_PP_RARE_1
        writeInteger(firstCarArray+0xF4,3044389769)
        --POR_991_S_12_PP_RARE_1
        writeInteger(firstCarArray+0xF8,3279588277)
        --REN_MEG_RS_10_PP_RARE_1
        writeInteger(firstCarArray+0xFC,1861624512)
        --SHE_DAY_COU_65_NFS_E
        writeInteger(firstCarArray+0x100,1095199585)
        --TOY_SUP_STK_98_MARKETING_1
        writeInteger(firstCarArray+0x104,1222984308)

        --CUSTOM MADE BY _mRally2
        --POR_991_S_12_PP_RUN
        writeInteger(firstCarArray+0x108,2276214493)
        --NIS_240_ZG_71_NFS_E
        writeInteger(firstCarArray+0x10C,3251408801)
        --FOR_FOC_RS_10_NFS_E
        writeInteger(firstCarArray+0x110,224517341)
        --TOY_SUP_STK_98_NFS_E
        writeInteger(firstCarArray+0x114,155202617)
        --NIS_GTR_R32_91_PRESALE_1
        writeInteger(firstCarArray+0x118,1851197596)
        --POR_GT3_RS_10_PP_STOCK_1 | POR_GT3_RS_10_PP_STOCK_2
        writeInteger(firstCarArray+0x11C,3662254698)
        --MAZ_RX7_RZ_98_PP_STOCK_1 | MAZ_RX7_RZ_98_PP_STOCK_2 | MAZ_RX7_RZ_98_PP_STOCK_3
        writeInteger(firstCarArray+0x120,1198552022)
        --NIS_370_Z_09_PP_STOCK_1 | NIS_370_Z_09_PP_STOCK_2 | NIS_370_Z_09_PP_STOCK_3
        writeInteger(firstCarArray+0x124,3231208053)
        --NIS_GTR_R35_08_PP_STOCK_1 | NIS_GTR_R35_08_PP_STOCK_2 | NIS_GTR_R35_08_PP_STOCK_3
        writeInteger(firstCarArray+0x128,907975255)
        --NIS_GTR_STK_73_NFS_E
        writeInteger(firstCarArray+0x12C,1264558075)
        --SUB_WRX_STI_09_NFS_E
        writeInteger(firstCarArray+0x130,3408409694)
        --LAM_COU_QV_85_PP_STOCK_1
        writeInteger(firstCarArray+0x134,2031156362)
        --LEX_LFA_STK_10_PP_STOCK_1
        writeInteger(firstCarArray+0x138,1242417971)

        --OVERRIDE UNUSED SLOTS WITH PADDING
        --DUMMY PERFORMANCE VEHICLE ID AST_ONE_77_10_PP1
        writeInteger(firstCarArray+0x13C,3355304522)
    end
end

gs = createTimer(nil)
timer_onTimer(gs,GasStation)
timer_setInterval(gs, 500)
timer_setEnabled(gs, true)

[DISABLE]
timer_setEnabled(gs, false)
print "Gas Stations timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>783</ID>
          <Description>"Gas Station Array Override"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

00853549:
nop
nop
 
[DISABLE]

00853549:
mov [eax],esi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>445</ID>
          <Description>"UNLOCK ALL VEHICLES"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [eax+18],1
jne "Need for Speed The Run.exe"+53D639

originalcode:
//cmp [eax+18],bl
//jne "Need for Speed The Run.exe"+53D639

exit:
jmp returnhere

"Need for Speed The Run.exe"+53D629:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+53D629:
cmp [eax+18],bl
jne "Need for Speed The Run.exe"+53D639
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>799</ID>
          <Description>"ID_PLAYLIST_CARRESTICTION_OPEN"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
push ebx
lea ebx,[esi+48]
mov [ebx],(int)0 //ID_PLAYLIST_CARRESTICTION_OPEN
mov ecx,[esi+48]
push 00
pop ebx

originalcode:
//mov ecx,[esi+48]
//push 00

exit:
jmp returnhere

"Need for Speed The Run.exe"+48D6C5:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+48D6C5:
mov ecx,[esi+48]
push 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>566</ID>
          <Description>"MILA SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9F 6C D5 13" --332754079 --nis_gtr_v_10_pp_stock_1

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "C6 31 5B 52"
    SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "49 8F 0D A9"
    RRM_ID = "0B D0 B7 AD"
    LIV_ID = "67 8A 91 13"
    PRF_ID = "A4 32 67 65"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>796</ID>
          <Description>"NIKKI SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]
local currentCar = "7C 89 2D 1F" --523078012 --nis_gtr_v_10_pp_stock_2

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "C6 31 5B 52"
    SPL_ID = "48 9B 36 65"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "C9 5F C0 DE"
    RRM_ID = "8B A0 6A E3"
    LIV_ID = "40 14 73 8F"
    PRF_ID = "A4 32 67 65"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>818</ID>
          <Description>"CESAR SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9C B4 8C 1D" --495760540 --bug_vey_ss_10

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "8B 37 3A F9"
    --SPL_ID = "41 87 77 31"
    EXH_ID = "4D 94 3E 52"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "24 69 86 BE"
    RRM_ID = "E6 68 2C C3"
    LIV_ID = "C7 34 E3 38"
    PRF_ID = "4C 1E 71 BE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>820</ID>
          <Description>"CESAR THUG 1 SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "13 8C FE 5C" --1560185875 --bug_vey_ss_10

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "8B 37 3A F9"
    --SPL_ID = "81 58 DD B0"
    EXH_ID = "4D 94 3E 52"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "24 FF A1 4C"
    RRM_ID = "E6 FE 47 51"
    LIV_ID = "C4 34 E3 38"
    PRF_ID = "4C 1E 71 BE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>819</ID>
          <Description>"CESAR THUG 2 SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "7A AE 04 62" --1644473978 --bug_vey_ss_10

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "8B 37 3A F9"
    --SPL_ID = "81 58 DD B0"
    EXH_ID = "4D 94 3E 52"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "A4 B3 39 F3"
    RRM_ID = "66 B3 DF F7"
    LIV_ID = "C5 34 E3 38"
    PRF_ID = "4C 1E 71 BE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>811</ID>
          <Description>"EDDIE SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "F0 3E A9 ED" --3987291888 --bug_vey_ss_10

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "5F 07 20 E4"
    --SPL_ID = "81 58 DD B0"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "23 AE 3A 74"
    RRM_ID = "23 AE 3A 74"
    LIV_ID = "C3 C6 B2 A4"
    PRF_ID = "BD 91 44 C5"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>813</ID>
          <Description>"CALVIN SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "F2 6F 25 BC" --3156570098 --pag_zon_cin_10_ai_256

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4C 35 63 EC"
    SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "6F 2A 0C 7B"
    RRM_ID = "AD 2A 66 76"
    LIV_ID = "A7 3D 7F 40"
    PRF_ID = "A0 33 70 A4"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"THE SUPERCAR RUN STRING SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "4D 41 4C 00 52 45 41 4C 49 53 54 49 43 00 53 45 4C 45 43 54 20 41 20 50 4C 41 59 4C 49 53 54 00"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    local string_end = {0x00}
    writeString(address+0x20,"THE SUPERCAR RUN")
    writeBytes(address+0x30,string_end)
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end


[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>800</ID>
          <Description>"POR_991_S_12_PP_RUN"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "DD 46 AC 87" --2276214493

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "28 A1 F4 7D"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "E1 39 41 43"
    RRM_ID = "2D 3A 9B 3E"
    LIV_ID = "6E 40 AC BF"
    PRF_ID = "F4 1E EE BD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>801</ID>
          <Description>"NIS_240_ZG_71_NFS_E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A1 8F CC C1" --3251408801

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "BD 9A 29 EB"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "CD BF 63 E6"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "38 02 29 8B"
    RRM_ID = "38 02 29 8B"
    LIV_ID = "77 FC 73 1E"
    PRF_ID = "F0 96 0C EE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>802</ID>
          <Description>"FOR_FOC_RS_10_NFS_E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "DD DC 61 0D" --224517341

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "D5 E3 E7 86"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "AC 6E B7 7E"
    RRM_ID = "AC 6E B7 7E"
    LIV_ID = "E0 66 9C D2"
    PRF_ID = "7D 6B A7 0C"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>803</ID>
          <Description>"TOY_SUP_STK_98_NFS_E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "39 34 40 09" --155202617

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "C6 31 5B 52"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "00 00 00 00"
    HOD_ID = "69 CA 04 0B"
    FRM_ID = "49 02 DA 74"
    RRM_ID = "49 02 DA 74"
    LIV_ID = "CE 94 BC 78"
    PRF_ID = "34 1C 17 50"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>804</ID>
          <Description>"NIS_GTR_R32_91_PRESALE_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9C 08 57 6E" --1851197596

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "08 9A 83 36"
    SPL_ID = "00 00 00 00"
    EXH_ID = "EB F5 98 2F"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "55 87 42 68"
    RRM_ID = "55 87 42 68"
    LIV_ID = "03 30 22 28"
    PRF_ID = "DB AD E4 33"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>805</ID>
          <Description>"POR_GT3_RS_10_PP_STOCK_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "6A 92 49 DA" --3662254698

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "A9 98 E1 3D"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "C9 3F 57 21"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "6F 2A 0C 7B"
    RRM_ID = "AD 2A 66 76"
    LIV_ID = "43 1F 82 16"
    PRF_ID = "15 44 7E 16"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>806</ID>
          <Description>"POR_GT3_RS_10_PP_STOCK_2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A5 34 99 8D" --2375627941

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "A9 98 E1 3D"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "2F A1 FB CC"
    RRM_ID = "6D 60 51 C8"
    LIV_ID = "45 C0 45 CE"
    PRF_ID = "15 44 7E 16"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>830</ID>
          <Description>"MAZ_RX7_RZ_98_PP_STOCK_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "D6 73 70 47" --1198552022

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 1D 96 87"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "6C 1F D4 CE"
    HOD_ID = "00 00 00 00"
    FRM_ID = "E6 6B 63 0B"
    RRM_ID = "E6 6B 63 0B"
    LIV_ID = "82 F5 EC 34"
    PRF_ID = "74 C0 91 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>831</ID>
          <Description>"MAZ_RX7_RZ_98_PP_STOCK_2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "1E 52 BB 6B" --1807438366

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "05 1D 96 87"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "EC F5 98 2F"
    HOD_ID = "00 00 00 00"
    FRM_ID = "75 AE 26 19"
    RRM_ID = "75 AE 26 19"
    LIV_ID = "E7 89 F7 57"
    PRF_ID = "E4 3C B7 72"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>832</ID>
          <Description>"MAZ_RX7_RZ_98_PP_STOCK_3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E1 3B 0F 52" --1376730081

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 1D 96 87"
    SPL_ID = "CB E1 DD 47"
    EXH_ID = "2F 09 BB E2"
    HOD_ID = "0A DC 8F 5F"
    FRM_ID = "D3 EF CA 59"
    RRM_ID = "AB 21 C5 27"
    LIV_ID = "00 30 22 28"
    PRF_ID = "74 C0 91 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>833</ID>
          <Description>"MAZ_RX7_RZ_98_PP STOCK SLOT OVERRIDE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 4D 41 5A 2F 4D 41 5A 5F 52 58 37 5F 52 5A 5F 39 38 5F 50 50 5F 53 54 4F 43 4B 5F 31"

local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    --local vehicle_1 = address - 0x3C
    --local vehicle_2 = address - 0x34
    --local vehicle_3 = address - 0x2C
    local vehicle_4 = address - 0x24
    local vehicle_5 = address - 0x1C
    local vehicle_6 = address - 0x14
    local vehicle_7 = address - 0xC
    local vehicle_8 = address - 0x4

    VEH_SLOT_OVERRIDE = "50 2D BD F4" --Dummy vehicle 300_mph_test_car_dyno

    --writeInteger(vehicle_1,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_2,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_3,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_4,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_5,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_6,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_7,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_8,AOBtoDEC(VEH_SLOT_OVERRIDE))

    print "Array Slot Override Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>837</ID>
          <Description>"NIS_370_Z_09_PP_STOCK_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "75 52 98 C0" --3231208053

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "B4 37 32 D7"
    SPL_ID = "4B 5F 0C F1"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "0A DC 8F 5F"
    FRM_ID = "03 DA 06 5C"
    RRM_ID = "43 99 5C 57"
    LIV_ID = "C2 2D 3D 22"
    PRF_ID = "4D DD 07 EF"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>835</ID>
          <Description>"NIS_370_Z_09_PP_STOCK_2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "94 23 56 9E" --2656445332

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "D7 37 32 D7"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "2A D8 3B 0B"
    --HOD_ID = "0A DC 8F 5F"
    FRM_ID = "D2 7C 0B D0"
    RRM_ID = "D2 7C 0B D0"
    LIV_ID = "8E F5 EC 34"
    PRF_ID = "4D DD 07 EF"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>834</ID>
          <Description>"NIS_370_Z_09_PP_STOCK_3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "85 29 44 E5" --3846449541

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "B4 37 32 D7"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "2A D8 3B 0B"
    --HOD_ID = "0A DC 8F 5F"
    FRM_ID = "21 A1 FB CC"
    RRM_ID = "21 A1 FB CC"
    LIV_ID = "2E BB 9E AA"
    PRF_ID = "4D DD 07 EF"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>836</ID>
          <Description>"NIS_370_Z_09_PP_STOCK SLOT OVERRIDE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 4E 49 53 2F 4E 49 53 5F 33 37 30 5F 5A 5F 30 39 5F 50 50 5F 53 54 4F 43 4B 5F 31 00"

local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    --local vehicle_1 = address - 0x3C
    --local vehicle_2 = address - 0x34
    --local vehicle_3 = address - 0x2C
    local vehicle_4 = address - 0x24
    local vehicle_5 = address - 0x1C
    local vehicle_6 = address - 0x14
    local vehicle_7 = address - 0xC
    local vehicle_8 = address - 0x4

    VEH_SLOT_OVERRIDE = "50 2D BD F4" --Dummy vehicle 300_mph_test_car_dyno

    --writeInteger(vehicle_1,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_2,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_3,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_4,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_5,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_6,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_7,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_8,AOBtoDEC(VEH_SLOT_OVERRIDE))

    print "Array Slot Override Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>840</ID>
          <Description>"NIS_GTR_R35_08_PP_STOCK_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "FB 9F 5F 4B" --1264558075

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "6D 5B 5D EB"
    SPL_ID = "48 9B 36 65"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "49 8F 0D A9"
    RRM_ID = "0B D0 B7 AD"
    LIV_ID = "86 2D 64 2B"
    PRF_ID = "A4 32 67 65"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>839</ID>
          <Description>"NIS_GTR_R35_08_PP_STOCK_2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "AA F9 10 5A" --1511061930

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "6D 5B 5D EB"
    SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "03 DA 06 5C"
    RRM_ID = "03 DA 06 5C"
    LIV_ID = "C4 94 BC 78"
    PRF_ID = "A4 32 67 65"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>838</ID>
          <Description>"NIS_GTR_R35_08_PP_STOCK_3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "5A D5 76 15" --360109402

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "6D 5B 5D EB"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "49 8F 0D A9"
    RRM_ID = "0B D0 B7 AD"
    LIV_ID = "82 B5 8C 94"
    PRF_ID = "A4 32 67 65"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>841</ID>
          <Description>"NIS_GTR_R35_08 SLOT OVERRIDE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 4E 49 53 2F 4E 49 53 5F 47 54 52 5F 52 33 35 5F 30 38 5F 50 50 5F 53 54 4F 43 4B 5F"

local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local vehicle_1 = address - 0x2C
    local vehicle_2 = address - 0x24
    local vehicle_3 = address - 0x1C
    local vehicle_4 = address - 0x14
    local vehicle_5 = address - 0xC
    local vehicle_6 = address - 0x4

    VEH_SLOT_OVERRIDE = "50 2D BD F4" --Dummy vehicle 300_mph_test_car_dyno

    --writeInteger(vehicle_1,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_2,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_3,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_4,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_5,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_6,AOBtoDEC(VEH_SLOT_OVERRIDE))

    print "Array Slot Override Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>842</ID>
          <Description>"NIS_GTR_STK_73_NFS_E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "57 9A 1E 36" --907975255

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "B9 98 0A 27"
    SPL_ID = "00 00 00 00"
    EXH_ID = "AD 84 70 6C"
    HOD_ID = "EC 33 AB B9"
    FRM_ID = "38 02 29 8B"
    RRM_ID = "38 02 29 8B"
    --LIV_ID = "82 B5 8C 94"
    PRF_ID = "8E B4 6A 63"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>843</ID>
          <Description>"SUB_WRX_STI_09_NFS_E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "5E 34 28 CB" --3408409694

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "3A 7E FA F6"
    SPL_ID = "E1 F8 D5 95"
    EXH_ID = "6B BD 50 5A"
    HOD_ID = "0B C9 FC E2"
    FRM_ID = "37 A3 28 F0"
    RRM_ID = "37 A3 28 F0"
    LIV_ID = "CE 82 F0 34"
    PRF_ID = "81 7B 0E 8E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>852</ID>
          <Description>"LAM_COU_QV_85_PP_STOCK_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "8A FC 10 79" --2031156362

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "D7 90 A2 E7"
    SPL_ID = "69 4D 22 67"
    EXH_ID = "2A 05 65 00"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "90 E4 C4 56"
    RRM_ID = "C1 50 2B 8B"
    LIV_ID = "C3 1F E8 47"
    PRF_ID = "16 FA DF 4B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>854</ID>
          <Description>"LAM_COU_QV_85_PP_STOCK_2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "3A D3 E7 88" --2296894266

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "D7 90 A2 E7"
    SPL_ID = "69 4D 22 67"
    EXH_ID = "2B 2C AE C2"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "90 E4 C4 56"
    RRM_ID = "C1 50 2B 8B"
    LIV_ID = "45 C0 45 CE"
    PRF_ID = "16 FA DF 4B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>853</ID>
          <Description>"LAM_COU_QV_85_PP_STOCK_3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "64 1F EB 8E" --2397773668

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "D7 90 A2 E7"
    SPL_ID = "00 00 00 00"
    EXH_ID = "EC C5 D6 DD"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "90 E4 C4 56"
    RRM_ID = "C1 50 2B 8B"
    LIV_ID = "32 4E EE B8"
    PRF_ID = "16 FA DF 4B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>855</ID>
          <Description>"LAM_COU_QV_85_PP SLOT OVERRIDE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 4C 41 4D 2F 4C 41 4D 5F 43 4F 55 5F 51 56 5F 38 35 5F 50 50 5F 53 54 4F 43 4B 5F 31"

local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    --local vehicle_1 = address - 0x3C
    --local vehicle_2 = address - 0x34
    --local vehicle_3 = address - 0x2C
    local vehicle_4 = address - 0x24
    local vehicle_5 = address - 0x1C
    local vehicle_6 = address - 0x14
    local vehicle_7 = address - 0xC
    local vehicle_8 = address - 0x4

    VEH_SLOT_OVERRIDE = "50 2D BD F4" --Dummy vehicle 300_mph_test_car_dyno

    --writeInteger(vehicle_1,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_2,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_3,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_4,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_5,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_6,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_7,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_8,AOBtoDEC(VEH_SLOT_OVERRIDE))

    print "Array Slot Override Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>856</ID>
          <Description>"LEX_LFA_STK_10_PP_STOCK_1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "33 CB 0D 4A" --1242417971

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "93 BD 78 C5"
    --SPL_ID = "69 4D 22 67"
    --EXH_ID = "2A 05 65 00"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "A5 17 A7 E3"
    RRM_ID = "E7 17 01 DF"
    LIV_ID = "45 42 9C 49"
    PRF_ID = "F9 69 C3 36"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>857</ID>
          <Description>"LEX_LFA_STK_10_PP_STOCK_2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "D2 C0 7B 59" --1501282514

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "93 BD 78 C5"
    --SPL_ID = "69 4D 22 67"
    EXH_ID = "2A 65 EE CA"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "A5 17 A7 E3"
    RRM_ID = "E7 17 01 DF"
    LIV_ID = "43 09 0D 8F"
    PRF_ID = "F9 69 C3 36"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>858</ID>
          <Description>"LEX_LFA_STK_10_PP_STOCK_3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "71 F4 49 69" --1766454385

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "93 BD 78 C5"
    SPL_ID = "4B 84 04 14"
    --EXH_ID = "EC C5 D6 DD"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "A5 17 A7 E3"
    RRM_ID = "E7 17 01 DF"
    LIV_ID = "C2 2D 3D 22"
    PRF_ID = "F9 69 C3 36"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>860</ID>
          <Description>"LEX_LFA_STK_10_PP_STOCK_4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "B7 2C E5 EC" --3974442167

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "93 BD 78 C5"
    --SPL_ID = "4B 84 04 14"
    EXH_ID = "AE B2 A7 0A"
    --HOD_ID = "0B C9 FC E2"
    FRM_ID = "A5 17 A7 E3"
    RRM_ID = "E7 17 01 DF"
    LIV_ID = "85 A2 B7 DD"
    PRF_ID = "F9 69 C3 36"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>859</ID>
          <Description>"LEX_LFA_STK_10_PP SLOT OVERRIDE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 4C 45 58 2F 4C 45 58 5F 4C 46 41 5F 53 54 4B 5F 31 30 5F 50 50 5F 53 54 4F 43 4B 5F"

local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    --local vehicle_1 = address - 0x3C
    --local vehicle_2 = address - 0x34
    --local vehicle_3 = address - 0x2C
    --local vehicle_4 = address - 0x24
    local vehicle_5 = address - 0x1C
    local vehicle_6 = address - 0x14
    local vehicle_7 = address - 0xC
    local vehicle_8 = address - 0x4

    VEH_SLOT_OVERRIDE = "50 2D BD F4" --Dummy vehicle 300_mph_test_car_dyno

    --writeInteger(vehicle_1,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_2,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_3,AOBtoDEC(VEH_SLOT_OVERRIDE))
    --writeInteger(vehicle_4,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_5,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_6,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_7,AOBtoDEC(VEH_SLOT_OVERRIDE))
    writeInteger(vehicle_8,AOBtoDEC(VEH_SLOT_OVERRIDE))

    print "Array Slot Override Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
